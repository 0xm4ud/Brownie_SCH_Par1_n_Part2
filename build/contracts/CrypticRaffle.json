{
  "abi": [
    {
      "inputs": [],
      "stateMutability": "payable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "PARTICIPIATION_PRICE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8[3]",
          "name": "numbers",
          "type": "uint8[3]"
        }
      ],
      "name": "guessNumbers",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8[3]",
          "name": "numbers",
          "type": "uint8[3]"
        }
      ],
      "name": "newRaffle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "allSourcePaths": {
    "0": "/Users/m4ud/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.8.0/contracts/access/Ownable.sol",
    "1": "/Users/m4ud/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.8.0/contracts/security/ReentrancyGuard.sol",
    "13": "/Users/m4ud/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.8.0/contracts/utils/Context.sol",
    "54": "contracts/sensitive-on-chain-data-3/CrypticRaffle.sol"
  },
  "ast": {
    "absolutePath": "contracts/sensitive-on-chain-data-3/CrypticRaffle.sol",
    "exportedSymbols": {
      "Context": [
        16761
      ],
      "CrypticRaffle": [
        4899
      ],
      "Ownable": [
        6228
      ],
      "ReentrancyGuard": [
        6115
      ]
    },
    "id": 4900,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 4764,
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".13"
        ],
        "nodeType": "PragmaDirective",
        "src": "116:24:54"
      },
      {
        "absolutePath": "/Users/m4ud/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.8.0/contracts/security/ReentrancyGuard.sol",
        "file": "@openzeppelin/contracts/security/ReentrancyGuard.sol",
        "id": 4765,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 4900,
        "sourceUnit": 6116,
        "src": "142:62:54",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/Users/m4ud/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.8.0/contracts/access/Ownable.sol",
        "file": "@openzeppelin/contracts/access/Ownable.sol",
        "id": 4766,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 4900,
        "sourceUnit": 6229,
        "src": "205:52:54",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 4767,
              "name": "Ownable",
              "nameLocations": [
                "285:7:54"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 6228,
              "src": "285:7:54"
            },
            "id": 4768,
            "nodeType": "InheritanceSpecifier",
            "src": "285:7:54"
          },
          {
            "baseName": {
              "id": 4769,
              "name": "ReentrancyGuard",
              "nameLocations": [
                "294:15:54"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 6115,
              "src": "294:15:54"
            },
            "id": 4770,
            "nodeType": "InheritanceSpecifier",
            "src": "294:15:54"
          }
        ],
        "canonicalName": "CrypticRaffle",
        "contractDependencies": [],
        "contractKind": "contract",
        "fullyImplemented": true,
        "id": 4899,
        "linearizedBaseContracts": [
          4899,
          6115,
          6228,
          16761
        ],
        "name": "CrypticRaffle",
        "nameLocation": "268:13:54",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": true,
            "functionSelector": "f97ecf00",
            "id": 4773,
            "mutability": "constant",
            "name": "PARTICIPIATION_PRICE",
            "nameLocation": "339:20:54",
            "nodeType": "VariableDeclaration",
            "scope": 4899,
            "src": "315:57:54",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 4771,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "315:7:54",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": {
              "hexValue": "302e3031",
              "id": 4772,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "number",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "362:10:54",
              "subdenomination": "ether",
              "typeDescriptions": {
                "typeIdentifier": "t_rational_10000000000000000_by_1",
                "typeString": "int_const 10000000000000000"
              },
              "value": "0.01"
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "id": 4776,
            "mutability": "mutable",
            "name": "isActive",
            "nameLocation": "389:8:54",
            "nodeType": "VariableDeclaration",
            "scope": 4899,
            "src": "376:29:54",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bool",
              "typeString": "bool"
            },
            "typeName": {
              "id": 4774,
              "name": "bool",
              "nodeType": "ElementaryTypeName",
              "src": "376:4:54",
              "typeDescriptions": {
                "typeIdentifier": "t_bool",
                "typeString": "bool"
              }
            },
            "value": {
              "hexValue": "66616c7365",
              "id": 4775,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "bool",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "400:5:54",
              "typeDescriptions": {
                "typeIdentifier": "t_bool",
                "typeString": "bool"
              },
              "value": "false"
            },
            "visibility": "private"
          },
          {
            "constant": false,
            "id": 4778,
            "mutability": "mutable",
            "name": "raffleId",
            "nameLocation": "417:8:54",
            "nodeType": "VariableDeclaration",
            "scope": 4899,
            "src": "409:16:54",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 4777,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "409:7:54",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "visibility": "internal"
          },
          {
            "constant": false,
            "id": 4784,
            "mutability": "mutable",
            "name": "raffles",
            "nameLocation": "525:7:54",
            "nodeType": "VariableDeclaration",
            "scope": 4899,
            "src": "488:44:54",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_uint256_$_t_array$_t_uint8_$3_storage_$",
              "typeString": "mapping(uint256 => uint8[3])"
            },
            "typeName": {
              "id": 4783,
              "keyName": "",
              "keyNameLocation": "-1:-1:-1",
              "keyType": {
                "id": 4779,
                "name": "uint256",
                "nodeType": "ElementaryTypeName",
                "src": "496:7:54",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              },
              "nodeType": "Mapping",
              "src": "488:28:54",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_uint256_$_t_array$_t_uint8_$3_storage_$",
                "typeString": "mapping(uint256 => uint8[3])"
              },
              "valueName": "",
              "valueNameLocation": "-1:-1:-1",
              "valueType": {
                "baseType": {
                  "id": 4780,
                  "name": "uint8",
                  "nodeType": "ElementaryTypeName",
                  "src": "507:5:54",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint8",
                    "typeString": "uint8"
                  }
                },
                "id": 4782,
                "length": {
                  "hexValue": "33",
                  "id": 4781,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": true,
                  "kind": "number",
                  "lValueRequested": false,
                  "nodeType": "Literal",
                  "src": "513:1:54",
                  "typeDescriptions": {
                    "typeIdentifier": "t_rational_3_by_1",
                    "typeString": "int_const 3"
                  },
                  "value": "3"
                },
                "nodeType": "ArrayTypeName",
                "src": "507:8:54",
                "typeDescriptions": {
                  "typeIdentifier": "t_array$_t_uint8_$3_storage_ptr",
                  "typeString": "uint8[3]"
                }
              }
            },
            "visibility": "private"
          },
          {
            "body": {
              "id": 4787,
              "nodeType": "Block",
              "src": "559:2:54",
              "statements": []
            },
            "id": 4788,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nameLocation": "-1:-1:-1",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 4785,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "548:2:54"
            },
            "returnParameters": {
              "id": 4786,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "559:0:54"
            },
            "scope": 4899,
            "src": "537:24:54",
            "stateMutability": "payable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 4811,
              "nodeType": "Block",
              "src": "630:78:54",
              "statements": [
                {
                  "expression": {
                    "id": 4799,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 4797,
                      "name": "raffleId",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4778,
                      "src": "636:8:54",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "+=",
                    "rightHandSide": {
                      "hexValue": "31",
                      "id": 4798,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "648:1:54",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_1_by_1",
                        "typeString": "int_const 1"
                      },
                      "value": "1"
                    },
                    "src": "636:13:54",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 4800,
                  "nodeType": "ExpressionStatement",
                  "src": "636:13:54"
                },
                {
                  "expression": {
                    "id": 4805,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 4801,
                        "name": "raffles",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4784,
                        "src": "655:7:54",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_uint256_$_t_array$_t_uint8_$3_storage_$",
                          "typeString": "mapping(uint256 => uint8[3] storage ref)"
                        }
                      },
                      "id": 4803,
                      "indexExpression": {
                        "id": 4802,
                        "name": "raffleId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4778,
                        "src": "663:8:54",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "655:17:54",
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_uint8_$3_storage",
                        "typeString": "uint8[3] storage ref"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 4804,
                      "name": "numbers",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4792,
                      "src": "675:7:54",
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_uint8_$3_calldata_ptr",
                        "typeString": "uint8[3] calldata"
                      }
                    },
                    "src": "655:27:54",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint8_$3_storage",
                      "typeString": "uint8[3] storage ref"
                    }
                  },
                  "id": 4806,
                  "nodeType": "ExpressionStatement",
                  "src": "655:27:54"
                },
                {
                  "expression": {
                    "id": 4809,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 4807,
                      "name": "isActive",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4776,
                      "src": "688:8:54",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "hexValue": "74727565",
                      "id": 4808,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "bool",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "699:4:54",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "value": "true"
                    },
                    "src": "688:15:54",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 4810,
                  "nodeType": "ExpressionStatement",
                  "src": "688:15:54"
                }
              ]
            },
            "functionSelector": "3f5a9a5f",
            "id": 4812,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 4795,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 4794,
                  "name": "onlyOwner",
                  "nameLocations": [
                    "620:9:54"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 6147,
                  "src": "620:9:54"
                },
                "nodeType": "ModifierInvocation",
                "src": "620:9:54"
              }
            ],
            "name": "newRaffle",
            "nameLocation": "574:9:54",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 4793,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4792,
                  "mutability": "mutable",
                  "name": "numbers",
                  "nameLocation": "602:7:54",
                  "nodeType": "VariableDeclaration",
                  "scope": 4812,
                  "src": "584:25:54",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_uint8_$3_calldata_ptr",
                    "typeString": "uint8[3]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 4789,
                      "name": "uint8",
                      "nodeType": "ElementaryTypeName",
                      "src": "584:5:54",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint8",
                        "typeString": "uint8"
                      }
                    },
                    "id": 4791,
                    "length": {
                      "hexValue": "33",
                      "id": 4790,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "590:1:54",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_3_by_1",
                        "typeString": "int_const 3"
                      },
                      "value": "3"
                    },
                    "nodeType": "ArrayTypeName",
                    "src": "584:8:54",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint8_$3_storage_ptr",
                      "typeString": "uint8[3]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "583:27:54"
            },
            "returnParameters": {
              "id": 4796,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "630:0:54"
            },
            "scope": 4899,
            "src": "565:143:54",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": {
              "id": 4897,
              "nodeType": "Block",
              "src": "778:751:54",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 4820,
                        "name": "isActive",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4776,
                        "src": "793:8:54",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "526166666c65206973206e6f7420616374697665",
                        "id": 4821,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "803:22:54",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_c44bb1aea68b3887e5a42cc7443f33cffd2427f58cb6ba2ae5803236465aa7ec",
                          "typeString": "literal_string \"Raffle is not active\""
                        },
                        "value": "Raffle is not active"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_c44bb1aea68b3887e5a42cc7443f33cffd2427f58cb6ba2ae5803236465aa7ec",
                          "typeString": "literal_string \"Raffle is not active\""
                        }
                      ],
                      "id": 4819,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "785:7:54",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 4822,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "785:41:54",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 4823,
                  "nodeType": "ExpressionStatement",
                  "src": "785:41:54"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 4828,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "expression": {
                            "id": 4825,
                            "name": "numbers",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 4816,
                            "src": "840:7:54",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_uint8_$3_calldata_ptr",
                              "typeString": "uint8[3] calldata"
                            }
                          },
                          "id": 4826,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "848:6:54",
                          "memberName": "length",
                          "nodeType": "MemberAccess",
                          "src": "840:14:54",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "hexValue": "33",
                          "id": 4827,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "858:1:54",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_3_by_1",
                            "typeString": "int_const 3"
                          },
                          "value": "3"
                        },
                        "src": "840:19:54",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "796f752073686f756c642067756573732033206e756d62657273",
                        "id": 4829,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "861:28:54",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_b27edac952d3e54c3cb6b0b6c62084273b1044dd50ea743d90a201bc73a4c0fb",
                          "typeString": "literal_string \"you should guess 3 numbers\""
                        },
                        "value": "you should guess 3 numbers"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_b27edac952d3e54c3cb6b0b6c62084273b1044dd50ea743d90a201bc73a4c0fb",
                          "typeString": "literal_string \"you should guess 3 numbers\""
                        }
                      ],
                      "id": 4824,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "832:7:54",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 4830,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "832:58:54",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 4831,
                  "nodeType": "ExpressionStatement",
                  "src": "832:58:54"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 4836,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "expression": {
                            "id": 4833,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "904:3:54",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 4834,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "908:5:54",
                          "memberName": "value",
                          "nodeType": "MemberAccess",
                          "src": "904:9:54",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "id": 4835,
                          "name": "PARTICIPIATION_PRICE",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 4773,
                          "src": "917:20:54",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "904:33:54",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "796f752073686f756c642070617920302e312065746820746f207061727469636970617465",
                        "id": 4837,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "939:39:54",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_a423078c2d6b61d8a3c421531f8ea4f302f3699d4481cd8054f6d8a6674dc047",
                          "typeString": "literal_string \"you should pay 0.1 eth to participate\""
                        },
                        "value": "you should pay 0.1 eth to participate"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_a423078c2d6b61d8a3c421531f8ea4f302f3699d4481cd8054f6d8a6674dc047",
                          "typeString": "literal_string \"you should pay 0.1 eth to participate\""
                        }
                      ],
                      "id": 4832,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "896:7:54",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 4838,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "896:83:54",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 4839,
                  "nodeType": "ExpressionStatement",
                  "src": "896:83:54"
                },
                {
                  "assignments": [
                    4841
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 4841,
                      "mutability": "mutable",
                      "name": "succeded",
                      "nameLocation": "991:8:54",
                      "nodeType": "VariableDeclaration",
                      "scope": 4897,
                      "src": "986:13:54",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "typeName": {
                        "id": 4840,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "986:4:54",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 4843,
                  "initialValue": {
                    "hexValue": "74727565",
                    "id": 4842,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "bool",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "1002:4:54",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    },
                    "value": "true"
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "986:20:54"
                },
                {
                  "body": {
                    "id": 4869,
                    "nodeType": "Block",
                    "src": "1126:149:54",
                    "statements": [
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint8",
                            "typeString": "uint8"
                          },
                          "id": 4862,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "baseExpression": {
                              "id": 4854,
                              "name": "numbers",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 4816,
                              "src": "1198:7:54",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_uint8_$3_calldata_ptr",
                                "typeString": "uint8[3] calldata"
                              }
                            },
                            "id": 4856,
                            "indexExpression": {
                              "id": 4855,
                              "name": "i",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 4845,
                              "src": "1206:1:54",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint8",
                                "typeString": "uint8"
                              }
                            },
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "1198:10:54",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint8",
                              "typeString": "uint8"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "!=",
                          "rightExpression": {
                            "baseExpression": {
                              "baseExpression": {
                                "id": 4857,
                                "name": "raffles",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4784,
                                "src": "1212:7:54",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_uint256_$_t_array$_t_uint8_$3_storage_$",
                                  "typeString": "mapping(uint256 => uint8[3] storage ref)"
                                }
                              },
                              "id": 4859,
                              "indexExpression": {
                                "id": 4858,
                                "name": "raffleId",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4778,
                                "src": "1220:8:54",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "1212:17:54",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_uint8_$3_storage",
                                "typeString": "uint8[3] storage ref"
                              }
                            },
                            "id": 4861,
                            "indexExpression": {
                              "id": 4860,
                              "name": "i",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 4845,
                              "src": "1230:1:54",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint8",
                                "typeString": "uint8"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "1212:20:54",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint8",
                              "typeString": "uint8"
                            }
                          },
                          "src": "1198:34:54",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 4868,
                        "nodeType": "IfStatement",
                        "src": "1195:74:54",
                        "trueBody": {
                          "id": 4867,
                          "nodeType": "Block",
                          "src": "1234:35:54",
                          "statements": [
                            {
                              "expression": {
                                "id": 4865,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "id": 4863,
                                  "name": "succeded",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 4841,
                                  "src": "1244:8:54",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bool",
                                    "typeString": "bool"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "=",
                                "rightHandSide": {
                                  "hexValue": "66616c7365",
                                  "id": 4864,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "bool",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "1255:5:54",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bool",
                                    "typeString": "bool"
                                  },
                                  "value": "false"
                                },
                                "src": "1244:16:54",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "id": 4866,
                              "nodeType": "ExpressionStatement",
                              "src": "1244:16:54"
                            }
                          ]
                        }
                      }
                    ]
                  },
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint8",
                      "typeString": "uint8"
                    },
                    "id": 4850,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 4848,
                      "name": "i",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4845,
                      "src": "1114:1:54",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint8",
                        "typeString": "uint8"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "<",
                    "rightExpression": {
                      "hexValue": "33",
                      "id": 4849,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "1118:1:54",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_3_by_1",
                        "typeString": "int_const 3"
                      },
                      "value": "3"
                    },
                    "src": "1114:5:54",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 4870,
                  "initializationExpression": {
                    "assignments": [
                      4845
                    ],
                    "declarations": [
                      {
                        "constant": false,
                        "id": 4845,
                        "mutability": "mutable",
                        "name": "i",
                        "nameLocation": "1109:1:54",
                        "nodeType": "VariableDeclaration",
                        "scope": 4870,
                        "src": "1103:7:54",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint8",
                          "typeString": "uint8"
                        },
                        "typeName": {
                          "id": 4844,
                          "name": "uint8",
                          "nodeType": "ElementaryTypeName",
                          "src": "1103:5:54",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint8",
                            "typeString": "uint8"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "id": 4847,
                    "initialValue": {
                      "hexValue": "30",
                      "id": 4846,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "1111:1:54",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "nodeType": "VariableDeclarationStatement",
                    "src": "1103:9:54"
                  },
                  "loopExpression": {
                    "expression": {
                      "id": 4852,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "UnaryOperation",
                      "operator": "++",
                      "prefix": false,
                      "src": "1121:3:54",
                      "subExpression": {
                        "id": 4851,
                        "name": "i",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4845,
                        "src": "1121:1:54",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint8",
                          "typeString": "uint8"
                        }
                      },
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint8",
                        "typeString": "uint8"
                      }
                    },
                    "id": 4853,
                    "nodeType": "ExpressionStatement",
                    "src": "1121:3:54"
                  },
                  "nodeType": "ForStatement",
                  "src": "1099:176:54"
                },
                {
                  "condition": {
                    "id": 4871,
                    "name": "succeded",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 4841,
                    "src": "1368:8:54",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 4896,
                  "nodeType": "IfStatement",
                  "src": "1365:160:54",
                  "trueBody": {
                    "id": 4895,
                    "nodeType": "Block",
                    "src": "1378:147:54",
                    "statements": [
                      {
                        "expression": {
                          "id": 4874,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 4872,
                            "name": "isActive",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 4776,
                            "src": "1386:8:54",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "hexValue": "66616c7365",
                            "id": 4873,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "bool",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "1397:5:54",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            "value": "false"
                          },
                          "src": "1386:16:54",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 4875,
                        "nodeType": "ExpressionStatement",
                        "src": "1386:16:54"
                      },
                      {
                        "assignments": [
                          4877,
                          null
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 4877,
                            "mutability": "mutable",
                            "name": "sent",
                            "nameLocation": "1416:4:54",
                            "nodeType": "VariableDeclaration",
                            "scope": 4895,
                            "src": "1411:9:54",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            "typeName": {
                              "id": 4876,
                              "name": "bool",
                              "nodeType": "ElementaryTypeName",
                              "src": "1411:4:54",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "visibility": "internal"
                          },
                          null
                        ],
                        "id": 4889,
                        "initialValue": {
                          "arguments": [
                            {
                              "hexValue": "",
                              "id": 4887,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "1472:2:54",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                                "typeString": "literal_string \"\""
                              },
                              "value": ""
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                                "typeString": "literal_string \"\""
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                                  "typeString": "literal_string \"\""
                                }
                              ],
                              "expression": {
                                "expression": {
                                  "id": 4878,
                                  "name": "msg",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": -15,
                                  "src": "1426:3:54",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_message",
                                    "typeString": "msg"
                                  }
                                },
                                "id": 4879,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberLocation": "1430:6:54",
                                "memberName": "sender",
                                "nodeType": "MemberAccess",
                                "src": "1426:10:54",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "id": 4880,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "1437:4:54",
                              "memberName": "call",
                              "nodeType": "MemberAccess",
                              "src": "1426:15:54",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
                                "typeString": "function (bytes memory) payable returns (bool,bytes memory)"
                              }
                            },
                            "id": 4886,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "names": [
                              "value"
                            ],
                            "nodeType": "FunctionCallOptions",
                            "options": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "id": 4883,
                                      "name": "this",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": -28,
                                      "src": "1457:4:54",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_contract$_CrypticRaffle_$4899",
                                        "typeString": "contract CrypticRaffle"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_contract$_CrypticRaffle_$4899",
                                        "typeString": "contract CrypticRaffle"
                                      }
                                    ],
                                    "id": 4882,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "lValueRequested": false,
                                    "nodeType": "ElementaryTypeNameExpression",
                                    "src": "1449:7:54",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_type$_t_address_$",
                                      "typeString": "type(address)"
                                    },
                                    "typeName": {
                                      "id": 4881,
                                      "name": "address",
                                      "nodeType": "ElementaryTypeName",
                                      "src": "1449:7:54",
                                      "typeDescriptions": {}
                                    }
                                  },
                                  "id": 4884,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "typeConversion",
                                  "lValueRequested": false,
                                  "nameLocations": [],
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "1449:13:54",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                "id": 4885,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberLocation": "1463:7:54",
                                "memberName": "balance",
                                "nodeType": "MemberAccess",
                                "src": "1449:21:54",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "src": "1426:45:54",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
                              "typeString": "function (bytes memory) payable returns (bool,bytes memory)"
                            }
                          },
                          "id": 4888,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1426:49:54",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
                            "typeString": "tuple(bool,bytes memory)"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "1410:65:54"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 4891,
                              "name": "sent",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 4877,
                              "src": "1491:4:54",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "4661696c656420746f2073656e6420455448",
                              "id": 4892,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "1497:20:54",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_a14d063efbeb956897c353204e1ee998d729d316bfdb01a81da7413a77626858",
                                "typeString": "literal_string \"Failed to send ETH\""
                              },
                              "value": "Failed to send ETH"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_a14d063efbeb956897c353204e1ee998d729d316bfdb01a81da7413a77626858",
                                "typeString": "literal_string \"Failed to send ETH\""
                              }
                            ],
                            "id": 4890,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "1483:7:54",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 4893,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1483:35:54",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 4894,
                        "nodeType": "ExpressionStatement",
                        "src": "1483:35:54"
                      }
                    ]
                  }
                }
              ]
            },
            "functionSelector": "c2847b3b",
            "id": 4898,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "guessNumbers",
            "nameLocation": "721:12:54",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 4817,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4816,
                  "mutability": "mutable",
                  "name": "numbers",
                  "nameLocation": "752:7:54",
                  "nodeType": "VariableDeclaration",
                  "scope": 4898,
                  "src": "734:25:54",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_uint8_$3_calldata_ptr",
                    "typeString": "uint8[3]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 4813,
                      "name": "uint8",
                      "nodeType": "ElementaryTypeName",
                      "src": "734:5:54",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint8",
                        "typeString": "uint8"
                      }
                    },
                    "id": 4815,
                    "length": {
                      "hexValue": "33",
                      "id": 4814,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "740:1:54",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_3_by_1",
                        "typeString": "int_const 3"
                      },
                      "value": "3"
                    },
                    "nodeType": "ArrayTypeName",
                    "src": "734:8:54",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint8_$3_storage_ptr",
                      "typeString": "uint8[3]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "733:27:54"
            },
            "returnParameters": {
              "id": 4818,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "778:0:54"
            },
            "scope": 4899,
            "src": "712:817:54",
            "stateMutability": "payable",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "scope": 4900,
        "src": "259:1273:54",
        "usedErrors": []
      }
    ],
    "src": "116:1416:54"
  },
  "bytecode": "60806040526002805460ff1916905561001733610020565b60018055610070565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b61064a8061007f6000396000f3fe6080604052600436106100555760003560e01c80633f5a9a5f1461005a578063715018a61461007c5780638da5cb5b14610091578063c2847b3b146100be578063f2fde38b146100d1578063f97ecf00146100f1575b600080fd5b34801561006657600080fd5b5061007a610075366004610535565b61011a565b005b34801561008857600080fd5b5061007a610168565b34801561009d57600080fd5b506000546040516001600160a01b0390911681526020015b60405180910390f35b61007a6100cc366004610535565b61017c565b3480156100dd57600080fd5b5061007a6100ec36600461055d565b610367565b3480156100fd57600080fd5b5061010c662386f26fc1000081565b6040519081526020016100b5565b6101226103e0565b60016003600082825461013591906105a3565b909155505060038054600090815260046020526040902061015791839061048a565b50506002805460ff19166001179055565b6101706103e0565b61017a600061043a565b565b60025460ff166101ca5760405162461bcd60e51b8152602060048201526014602482015273526166666c65206973206e6f742061637469766560601b60448201526064015b60405180910390fd5b662386f26fc10000341461022e5760405162461bcd60e51b815260206004820152602560248201527f796f752073686f756c642070617920302e312065746820746f20706172746963604482015264697061746560d81b60648201526084016101c1565b600160005b60038160ff1610156102c3576003805460009081526004602052604090209060ff8316908110610265576102656105bc565b602081049091015460ff601f9092166101000a90048116908490831660038110610291576102916105bc565b6020020160208101906102a491906105d2565b60ff16146102b157600091505b806102bb816105f5565b915050610233565b508015610363576002805460ff19169055604051600090339047908381818185875af1925050503d8060008114610316576040519150601f19603f3d011682016040523d82523d6000602084013e61031b565b606091505b50509050806103615760405162461bcd60e51b815260206004820152601260248201527108cc2d2d8cac840e8de40e6cadcc8408aa8960731b60448201526064016101c1565b505b5050565b61036f6103e0565b6001600160a01b0381166103d45760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016101c1565b6103dd8161043a565b50565b6000546001600160a01b0316331461017a5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016101c1565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001830191839082156105105791602002820160005b838211156104e157833560ff1683826101000a81548160ff021916908360ff16021790555092602001926001016020816000010492830192600103026104a0565b801561050e5782816101000a81549060ff02191690556001016020816000010492830192600103026104e1565b505b5061051c929150610520565b5090565b5b8082111561051c5760008155600101610521565b60006060828403121561054757600080fd5b8260608301111561055757600080fd5b50919050565b60006020828403121561056f57600080fd5b81356001600160a01b038116811461058657600080fd5b9392505050565b634e487b7160e01b600052601160045260246000fd5b808201808211156105b6576105b661058d565b92915050565b634e487b7160e01b600052603260045260246000fd5b6000602082840312156105e457600080fd5b813560ff8116811461058657600080fd5b600060ff821660ff810361060b5761060b61058d565b6001019291505056fea26469706673582212201fa4e61ac9bd3fa36e274cb010f1cd44706d37230425b4b5e5f9139f3ca946df64736f6c63430008130033",
  "bytecodeSha1": "3e78acd22ea33926dd9ed875676a7bbf46976c58",
  "compiler": {
    "evm_version": "istanbul",
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "version": "0.8.19+commit.7dd6d404"
  },
  "contractName": "CrypticRaffle",
  "coverageMap": {
    "branches": {
      "0": {
        "Ownable._checkOwner": {
          "23": [
            1422,
            1445,
            true
          ]
        },
        "Ownable.transferOwnership": {
          "22": [
            2169,
            2191,
            true
          ]
        }
      },
      "1": {},
      "13": {},
      "54": {
        "CrypticRaffle.guessNumbers": {
          "17": [
            793,
            801,
            true
          ],
          "18": [
            904,
            937,
            true
          ],
          "19": [
            1198,
            1232,
            false
          ],
          "20": [
            1368,
            1376,
            false
          ],
          "21": [
            1491,
            1495,
            true
          ]
        }
      }
    },
    "statements": {
      "0": {
        "Ownable._checkOwner": {
          "14": [
            1414,
            1482
          ]
        },
        "Ownable._transferOwnership": {
          "15": [
            2541,
            2558
          ],
          "16": [
            2568,
            2613
          ]
        },
        "Ownable.owner": {
          "0": [
            1266,
            1279
          ]
        },
        "Ownable.renounceOwnership": {
          "4": [
            1895,
            1925
          ]
        },
        "Ownable.transferOwnership": {
          "11": [
            2161,
            2234
          ],
          "12": [
            2244,
            2272
          ]
        }
      },
      "1": {},
      "13": {
        "Context._msgSender": {
          "13": [
            712,
            729
          ]
        }
      },
      "54": {
        "CrypticRaffle.guessNumbers": {
          "5": [
            785,
            826
          ],
          "6": [
            896,
            979
          ],
          "7": [
            1244,
            1260
          ],
          "8": [
            1121,
            1124
          ],
          "9": [
            1386,
            1402
          ],
          "10": [
            1483,
            1518
          ]
        },
        "CrypticRaffle.newRaffle": {
          "1": [
            636,
            649
          ],
          "2": [
            655,
            682
          ],
          "3": [
            688,
            703
          ]
        }
      }
    }
  },
  "dependencies": [
    "OpenZeppelin/openzeppelin-contracts@4.8.0/Context",
    "OpenZeppelin/openzeppelin-contracts@4.8.0/Ownable",
    "OpenZeppelin/openzeppelin-contracts@4.8.0/ReentrancyGuard"
  ],
  "deployedBytecode": "6080604052600436106100555760003560e01c80633f5a9a5f1461005a578063715018a61461007c5780638da5cb5b14610091578063c2847b3b146100be578063f2fde38b146100d1578063f97ecf00146100f1575b600080fd5b34801561006657600080fd5b5061007a610075366004610535565b61011a565b005b34801561008857600080fd5b5061007a610168565b34801561009d57600080fd5b506000546040516001600160a01b0390911681526020015b60405180910390f35b61007a6100cc366004610535565b61017c565b3480156100dd57600080fd5b5061007a6100ec36600461055d565b610367565b3480156100fd57600080fd5b5061010c662386f26fc1000081565b6040519081526020016100b5565b6101226103e0565b60016003600082825461013591906105a3565b909155505060038054600090815260046020526040902061015791839061048a565b50506002805460ff19166001179055565b6101706103e0565b61017a600061043a565b565b60025460ff166101ca5760405162461bcd60e51b8152602060048201526014602482015273526166666c65206973206e6f742061637469766560601b60448201526064015b60405180910390fd5b662386f26fc10000341461022e5760405162461bcd60e51b815260206004820152602560248201527f796f752073686f756c642070617920302e312065746820746f20706172746963604482015264697061746560d81b60648201526084016101c1565b600160005b60038160ff1610156102c3576003805460009081526004602052604090209060ff8316908110610265576102656105bc565b602081049091015460ff601f9092166101000a90048116908490831660038110610291576102916105bc565b6020020160208101906102a491906105d2565b60ff16146102b157600091505b806102bb816105f5565b915050610233565b508015610363576002805460ff19169055604051600090339047908381818185875af1925050503d8060008114610316576040519150601f19603f3d011682016040523d82523d6000602084013e61031b565b606091505b50509050806103615760405162461bcd60e51b815260206004820152601260248201527108cc2d2d8cac840e8de40e6cadcc8408aa8960731b60448201526064016101c1565b505b5050565b61036f6103e0565b6001600160a01b0381166103d45760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016101c1565b6103dd8161043a565b50565b6000546001600160a01b0316331461017a5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016101c1565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001830191839082156105105791602002820160005b838211156104e157833560ff1683826101000a81548160ff021916908360ff16021790555092602001926001016020816000010492830192600103026104a0565b801561050e5782816101000a81549060ff02191690556001016020816000010492830192600103026104e1565b505b5061051c929150610520565b5090565b5b8082111561051c5760008155600101610521565b60006060828403121561054757600080fd5b8260608301111561055757600080fd5b50919050565b60006020828403121561056f57600080fd5b81356001600160a01b038116811461058657600080fd5b9392505050565b634e487b7160e01b600052601160045260246000fd5b808201808211156105b6576105b661058d565b92915050565b634e487b7160e01b600052603260045260246000fd5b6000602082840312156105e457600080fd5b813560ff8116811461058657600080fd5b600060ff821660ff810361060b5761060b61058d565b6001019291505056fea26469706673582212201fa4e61ac9bd3fa36e274cb010f1cd44706d37230425b4b5e5f9139f3ca946df64736f6c63430008130033",
  "deployedSourceMap": "259:1273:54:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;565:143;;;;;;;;;;-1:-1:-1;565:143:54;;;;;:::i;:::-;;:::i;:::-;;1831:101:0;;;;;;;;;;;;;:::i;1201:85::-;;;;;;;;;;-1:-1:-1;1247:7:0;1273:6;1201:85;;-1:-1:-1;;;;;1273:6:0;;;414:51:63;;402:2;387:18;1201:85:0;;;;;;;;712:817:54;;;;;;:::i;:::-;;:::i;2081:198:0:-;;;;;;;;;;-1:-1:-1;2081:198:0;;;;;:::i;:::-;;:::i;315:57:54:-;;;;;;;;;;;;362:10;315:57;;;;;913:25:63;;;901:2;886:18;315:57:54;767:177:63;565:143:54;1094:13:0;:11;:13::i;:::-;648:1:54::1;636:8;;:13;;;;;;;:::i;:::-;::::0;;;-1:-1:-1;;663:8:54::1;::::0;;655:17:::1;::::0;;;:7:::1;:17;::::0;;;;:27:::1;::::0;675:7;;655:27:::1;:::i;:::-;-1:-1:-1::0;;688:8:54::1;:15:::0;;-1:-1:-1;;688:15:54::1;699:4;688:15;::::0;;565:143::o;1831:101:0:-;1094:13;:11;:13::i;:::-;1895:30:::1;1922:1;1895:18;:30::i;:::-;1831:101::o:0;712:817:54:-;793:8;;;;785:41;;;;-1:-1:-1;;;785:41:54;;1413:2:63;785:41:54;;;1395:21:63;1452:2;1432:18;;;1425:30;-1:-1:-1;;;1471:18:63;;;1464:50;1531:18;;785:41:54;;;;;;;;;362:10;904:9;:33;896:83;;;;-1:-1:-1;;;896:83:54;;2117:2:63;896:83:54;;;2099:21:63;2156:2;2136:18;;;2129:30;2195:34;2175:18;;;2168:62;-1:-1:-1;;;2246:18:63;;;2239:35;2291:19;;896:83:54;1915:401:63;896:83:54;1002:4;986:13;1099:176;1118:1;1114;:5;;;1099:176;;;1220:8;;;1212:17;;;;:7;:17;;;;;;:20;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;1198:7;;:10;;;;;;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;:34;;;1195:74;;1255:5;1244:16;;1195:74;1121:3;;;;:::i;:::-;;;;1099:176;;;;1368:8;1365:160;;;1386:8;:16;;-1:-1:-1;;1386:16:54;;;1426:49;;-1:-1:-1;;1426:10:54;;1449:21;;-1:-1:-1;1426:49:54;-1:-1:-1;1426:49:54;1449:21;1426:10;:49;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1410:65;;;1491:4;1483:35;;;;-1:-1:-1;;;1483:35:54;;3319:2:63;1483:35:54;;;3301:21:63;3358:2;3338:18;;;3331:30;-1:-1:-1;;;3377:18:63;;;3370:48;3435:18;;1483:35:54;3117:342:63;1483:35:54;1378:147;1365:160;778:751;712:817;:::o;2081:198:0:-;1094:13;:11;:13::i;:::-;-1:-1:-1;;;;;2169:22:0;::::1;2161:73;;;::::0;-1:-1:-1;;;2161:73:0;;3666:2:63;2161:73:0::1;::::0;::::1;3648:21:63::0;3705:2;3685:18;;;3678:30;3744:34;3724:18;;;3717:62;-1:-1:-1;;;3795:18:63;;;3788:36;3841:19;;2161:73:0::1;3464:402:63::0;2161:73:0::1;2244:28;2263:8;2244:18;:28::i;:::-;2081:198:::0;:::o;1359:130::-;1247:7;1273:6;-1:-1:-1;;;;;1273:6:0;719:10:13;1422:23:0;1414:68;;;;-1:-1:-1;;;1414:68:0;;4073:2:63;1414:68:0;;;4055:21:63;;;4092:18;;;4085:30;4151:34;4131:18;;;4124:62;4203:18;;1414:68:0;3871:356:63;2433:187:0;2506:16;2525:6;;-1:-1:-1;;;;;2541:17:0;;;-1:-1:-1;;;;;;2541:17:0;;;;;;2573:40;;2525:6;;;;;;;2573:40;;2506:16;2573:40;2496:124;2433:187;:::o;-1:-1:-1:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;14:249:63;96:6;149:2;137:9;128:7;124:23;120:32;117:52;;;165:1;162;155:12;117:52;204:7;199:2;188:9;184:18;181:31;178:51;;;225:1;222;215:12;178:51;-1:-1:-1;248:9:63;14:249;-1:-1:-1;14:249:63:o;476:286::-;535:6;588:2;576:9;567:7;563:23;559:32;556:52;;;604:1;601;594:12;556:52;630:23;;-1:-1:-1;;;;;682:31:63;;672:42;;662:70;;728:1;725;718:12;662:70;751:5;476:286;-1:-1:-1;;;476:286:63:o;949:127::-;1010:10;1005:3;1001:20;998:1;991:31;1041:4;1038:1;1031:15;1065:4;1062:1;1055:15;1081:125;1146:9;;;1167:10;;;1164:36;;;1180:18;;:::i;:::-;1081:125;;;;:::o;2321:127::-;2382:10;2377:3;2373:20;2370:1;2363:31;2413:4;2410:1;2403:15;2437:4;2434:1;2427:15;2453:269;2510:6;2563:2;2551:9;2542:7;2538:23;2534:32;2531:52;;;2579:1;2576;2569:12;2531:52;2618:9;2605:23;2668:4;2661:5;2657:16;2650:5;2647:27;2637:55;;2688:1;2685;2678:12;2727:175;2764:3;2808:4;2801:5;2797:16;2837:4;2828:7;2825:17;2822:43;;2845:18;;:::i;:::-;2894:1;2881:15;;2727:175;-1:-1:-1;;2727:175:63:o",
  "language": "Solidity",
  "natspec": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "offset": [
    259,
    1532
  ],
  "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x55 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x3F5A9A5F EQ PUSH2 0x5A JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x7C JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x91 JUMPI DUP1 PUSH4 0xC2847B3B EQ PUSH2 0xBE JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0xD1 JUMPI DUP1 PUSH4 0xF97ECF00 EQ PUSH2 0xF1 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x66 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x7A PUSH2 0x75 CALLDATASIZE PUSH1 0x4 PUSH2 0x535 JUMP JUMPDEST PUSH2 0x11A JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x88 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x7A PUSH2 0x168 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x9D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x0 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x7A PUSH2 0xCC CALLDATASIZE PUSH1 0x4 PUSH2 0x535 JUMP JUMPDEST PUSH2 0x17C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xDD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x7A PUSH2 0xEC CALLDATASIZE PUSH1 0x4 PUSH2 0x55D JUMP JUMPDEST PUSH2 0x367 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xFD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x10C PUSH7 0x2386F26FC10000 DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xB5 JUMP JUMPDEST PUSH2 0x122 PUSH2 0x3E0 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x3 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x135 SWAP2 SWAP1 PUSH2 0x5A3 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x3 DUP1 SLOAD PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x157 SWAP2 DUP4 SWAP1 PUSH2 0x48A JUMP JUMPDEST POP POP PUSH1 0x2 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x170 PUSH2 0x3E0 JUMP JUMPDEST PUSH2 0x17A PUSH1 0x0 PUSH2 0x43A JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0xFF AND PUSH2 0x1CA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x526166666C65206973206E6F7420616374697665 PUSH1 0x60 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH7 0x2386F26FC10000 CALLVALUE EQ PUSH2 0x22E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x796F752073686F756C642070617920302E312065746820746F20706172746963 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x6970617465 PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x1C1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 JUMPDEST PUSH1 0x3 DUP2 PUSH1 0xFF AND LT ISZERO PUSH2 0x2C3 JUMPI PUSH1 0x3 DUP1 SLOAD PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP1 PUSH1 0xFF DUP4 AND SWAP1 DUP2 LT PUSH2 0x265 JUMPI PUSH2 0x265 PUSH2 0x5BC JUMP JUMPDEST PUSH1 0x20 DUP2 DIV SWAP1 SWAP2 ADD SLOAD PUSH1 0xFF PUSH1 0x1F SWAP1 SWAP3 AND PUSH2 0x100 EXP SWAP1 DIV DUP2 AND SWAP1 DUP5 SWAP1 DUP4 AND PUSH1 0x3 DUP2 LT PUSH2 0x291 JUMPI PUSH2 0x291 PUSH2 0x5BC JUMP JUMPDEST PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x2A4 SWAP2 SWAP1 PUSH2 0x5D2 JUMP JUMPDEST PUSH1 0xFF AND EQ PUSH2 0x2B1 JUMPI PUSH1 0x0 SWAP2 POP JUMPDEST DUP1 PUSH2 0x2BB DUP2 PUSH2 0x5F5 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x233 JUMP JUMPDEST POP DUP1 ISZERO PUSH2 0x363 JUMPI PUSH1 0x2 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH1 0x0 SWAP1 CALLER SWAP1 SELFBALANCE SWAP1 DUP4 DUP2 DUP2 DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x316 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x31B JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x361 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x12 PUSH1 0x24 DUP3 ADD MSTORE PUSH18 0x8CC2D2D8CAC840E8DE40E6CADCC8408AA89 PUSH1 0x73 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x1C1 JUMP JUMPDEST POP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x36F PUSH2 0x3E0 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x3D4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x1C1 JUMP JUMPDEST PUSH2 0x3DD DUP2 PUSH2 0x43A JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x17A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x1C1 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x1 DUP4 ADD SWAP2 DUP4 SWAP1 DUP3 ISZERO PUSH2 0x510 JUMPI SWAP2 PUSH1 0x20 MUL DUP3 ADD PUSH1 0x0 JUMPDEST DUP4 DUP3 GT ISZERO PUSH2 0x4E1 JUMPI DUP4 CALLDATALOAD PUSH1 0xFF AND DUP4 DUP3 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 PUSH1 0xFF AND MUL OR SWAP1 SSTORE POP SWAP3 PUSH1 0x20 ADD SWAP3 PUSH1 0x1 ADD PUSH1 0x20 DUP2 PUSH1 0x0 ADD DIV SWAP3 DUP4 ADD SWAP3 PUSH1 0x1 SUB MUL PUSH2 0x4A0 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x50E JUMPI DUP3 DUP2 PUSH2 0x100 EXP DUP2 SLOAD SWAP1 PUSH1 0xFF MUL NOT AND SWAP1 SSTORE PUSH1 0x1 ADD PUSH1 0x20 DUP2 PUSH1 0x0 ADD DIV SWAP3 DUP4 ADD SWAP3 PUSH1 0x1 SUB MUL PUSH2 0x4E1 JUMP JUMPDEST POP JUMPDEST POP PUSH2 0x51C SWAP3 SWAP2 POP PUSH2 0x520 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0x51C JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x521 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x547 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 PUSH1 0x60 DUP4 ADD GT ISZERO PUSH2 0x557 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x56F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x586 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x5B6 JUMPI PUSH2 0x5B6 PUSH2 0x58D JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x5E4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0xFF DUP2 AND DUP2 EQ PUSH2 0x586 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0xFF DUP3 AND PUSH1 0xFF DUP2 SUB PUSH2 0x60B JUMPI PUSH2 0x60B PUSH2 0x58D JUMP JUMPDEST PUSH1 0x1 ADD SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x1F LOG4 0xE6 BYTE 0xC9 0xBD EXTCODEHASH LOG3 PUSH15 0x274CB010F1CD44706D37230425B4B5 0xE5 0xF9 SGT SWAP16 EXTCODECOPY 0xA9 CHAINID 0xDF PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP CALLER ",
  "pcMap": {
    "0": {
      "offset": [
        259,
        1532
      ],
      "op": "PUSH1",
      "path": "54",
      "value": "0x80"
    },
    "2": {
      "fn": null,
      "offset": [
        259,
        1532
      ],
      "op": "PUSH1",
      "path": "54",
      "value": "0x40"
    },
    "4": {
      "fn": null,
      "offset": [
        259,
        1532
      ],
      "op": "MSTORE",
      "path": "54"
    },
    "5": {
      "fn": null,
      "offset": [
        259,
        1532
      ],
      "op": "PUSH1",
      "path": "54",
      "value": "0x4"
    },
    "7": {
      "fn": null,
      "offset": [
        259,
        1532
      ],
      "op": "CALLDATASIZE",
      "path": "54"
    },
    "8": {
      "fn": null,
      "offset": [
        259,
        1532
      ],
      "op": "LT",
      "path": "54"
    },
    "9": {
      "fn": null,
      "offset": [
        259,
        1532
      ],
      "op": "PUSH2",
      "path": "54",
      "value": "0x55"
    },
    "12": {
      "fn": null,
      "offset": [
        259,
        1532
      ],
      "op": "JUMPI",
      "path": "54"
    },
    "13": {
      "fn": null,
      "offset": [
        259,
        1532
      ],
      "op": "PUSH1",
      "path": "54",
      "value": "0x0"
    },
    "15": {
      "fn": null,
      "offset": [
        259,
        1532
      ],
      "op": "CALLDATALOAD",
      "path": "54"
    },
    "16": {
      "fn": null,
      "offset": [
        259,
        1532
      ],
      "op": "PUSH1",
      "path": "54",
      "value": "0xE0"
    },
    "18": {
      "fn": null,
      "offset": [
        259,
        1532
      ],
      "op": "SHR",
      "path": "54"
    },
    "19": {
      "fn": null,
      "offset": [
        259,
        1532
      ],
      "op": "DUP1",
      "path": "54"
    },
    "20": {
      "fn": null,
      "offset": [
        259,
        1532
      ],
      "op": "PUSH4",
      "path": "54",
      "value": "0x3F5A9A5F"
    },
    "25": {
      "fn": null,
      "offset": [
        259,
        1532
      ],
      "op": "EQ",
      "path": "54"
    },
    "26": {
      "fn": null,
      "offset": [
        259,
        1532
      ],
      "op": "PUSH2",
      "path": "54",
      "value": "0x5A"
    },
    "29": {
      "fn": null,
      "offset": [
        259,
        1532
      ],
      "op": "JUMPI",
      "path": "54"
    },
    "30": {
      "fn": null,
      "offset": [
        259,
        1532
      ],
      "op": "DUP1",
      "path": "54"
    },
    "31": {
      "fn": null,
      "offset": [
        259,
        1532
      ],
      "op": "PUSH4",
      "path": "54",
      "value": "0x715018A6"
    },
    "36": {
      "fn": null,
      "offset": [
        259,
        1532
      ],
      "op": "EQ",
      "path": "54"
    },
    "37": {
      "fn": null,
      "offset": [
        259,
        1532
      ],
      "op": "PUSH2",
      "path": "54",
      "value": "0x7C"
    },
    "40": {
      "fn": null,
      "offset": [
        259,
        1532
      ],
      "op": "JUMPI",
      "path": "54"
    },
    "41": {
      "fn": null,
      "offset": [
        259,
        1532
      ],
      "op": "DUP1",
      "path": "54"
    },
    "42": {
      "fn": null,
      "offset": [
        259,
        1532
      ],
      "op": "PUSH4",
      "path": "54",
      "value": "0x8DA5CB5B"
    },
    "47": {
      "fn": null,
      "offset": [
        259,
        1532
      ],
      "op": "EQ",
      "path": "54"
    },
    "48": {
      "fn": null,
      "offset": [
        259,
        1532
      ],
      "op": "PUSH2",
      "path": "54",
      "value": "0x91"
    },
    "51": {
      "fn": null,
      "offset": [
        259,
        1532
      ],
      "op": "JUMPI",
      "path": "54"
    },
    "52": {
      "fn": null,
      "offset": [
        259,
        1532
      ],
      "op": "DUP1",
      "path": "54"
    },
    "53": {
      "fn": null,
      "offset": [
        259,
        1532
      ],
      "op": "PUSH4",
      "path": "54",
      "value": "0xC2847B3B"
    },
    "58": {
      "fn": null,
      "offset": [
        259,
        1532
      ],
      "op": "EQ",
      "path": "54"
    },
    "59": {
      "fn": null,
      "offset": [
        259,
        1532
      ],
      "op": "PUSH2",
      "path": "54",
      "value": "0xBE"
    },
    "62": {
      "fn": null,
      "offset": [
        259,
        1532
      ],
      "op": "JUMPI",
      "path": "54"
    },
    "63": {
      "fn": null,
      "offset": [
        259,
        1532
      ],
      "op": "DUP1",
      "path": "54"
    },
    "64": {
      "fn": null,
      "offset": [
        259,
        1532
      ],
      "op": "PUSH4",
      "path": "54",
      "value": "0xF2FDE38B"
    },
    "69": {
      "fn": null,
      "offset": [
        259,
        1532
      ],
      "op": "EQ",
      "path": "54"
    },
    "70": {
      "fn": null,
      "offset": [
        259,
        1532
      ],
      "op": "PUSH2",
      "path": "54",
      "value": "0xD1"
    },
    "73": {
      "fn": null,
      "offset": [
        259,
        1532
      ],
      "op": "JUMPI",
      "path": "54"
    },
    "74": {
      "fn": null,
      "offset": [
        259,
        1532
      ],
      "op": "DUP1",
      "path": "54"
    },
    "75": {
      "fn": null,
      "offset": [
        259,
        1532
      ],
      "op": "PUSH4",
      "path": "54",
      "value": "0xF97ECF00"
    },
    "80": {
      "fn": null,
      "offset": [
        259,
        1532
      ],
      "op": "EQ",
      "path": "54"
    },
    "81": {
      "fn": null,
      "offset": [
        259,
        1532
      ],
      "op": "PUSH2",
      "path": "54",
      "value": "0xF1"
    },
    "84": {
      "fn": null,
      "offset": [
        259,
        1532
      ],
      "op": "JUMPI",
      "path": "54"
    },
    "85": {
      "fn": null,
      "offset": [
        259,
        1532
      ],
      "op": "JUMPDEST",
      "path": "54"
    },
    "86": {
      "fn": null,
      "offset": [
        259,
        1532
      ],
      "op": "PUSH1",
      "path": "54",
      "value": "0x0"
    },
    "88": {
      "fn": null,
      "offset": [
        259,
        1532
      ],
      "op": "DUP1",
      "path": "54"
    },
    "89": {
      "first_revert": true,
      "fn": null,
      "offset": [
        259,
        1532
      ],
      "op": "REVERT",
      "path": "54"
    },
    "90": {
      "fn": "CrypticRaffle.newRaffle",
      "offset": [
        565,
        708
      ],
      "op": "JUMPDEST",
      "path": "54"
    },
    "91": {
      "fn": "CrypticRaffle.newRaffle",
      "offset": [
        565,
        708
      ],
      "op": "CALLVALUE",
      "path": "54"
    },
    "92": {
      "fn": "CrypticRaffle.newRaffle",
      "offset": [
        565,
        708
      ],
      "op": "DUP1",
      "path": "54"
    },
    "93": {
      "fn": "CrypticRaffle.newRaffle",
      "offset": [
        565,
        708
      ],
      "op": "ISZERO",
      "path": "54"
    },
    "94": {
      "fn": "CrypticRaffle.newRaffle",
      "offset": [
        565,
        708
      ],
      "op": "PUSH2",
      "path": "54",
      "value": "0x66"
    },
    "97": {
      "fn": "CrypticRaffle.newRaffle",
      "offset": [
        565,
        708
      ],
      "op": "JUMPI",
      "path": "54"
    },
    "98": {
      "fn": "CrypticRaffle.newRaffle",
      "offset": [
        565,
        708
      ],
      "op": "PUSH1",
      "path": "54",
      "value": "0x0"
    },
    "100": {
      "fn": "CrypticRaffle.newRaffle",
      "offset": [
        565,
        708
      ],
      "op": "DUP1",
      "path": "54"
    },
    "101": {
      "fn": "CrypticRaffle.newRaffle",
      "offset": [
        565,
        708
      ],
      "op": "REVERT",
      "path": "54"
    },
    "102": {
      "fn": "CrypticRaffle.newRaffle",
      "offset": [
        565,
        708
      ],
      "op": "JUMPDEST",
      "path": "54"
    },
    "103": {
      "op": "POP"
    },
    "104": {
      "fn": "CrypticRaffle.newRaffle",
      "offset": [
        565,
        708
      ],
      "op": "PUSH2",
      "path": "54",
      "value": "0x7A"
    },
    "107": {
      "fn": "CrypticRaffle.newRaffle",
      "offset": [
        565,
        708
      ],
      "op": "PUSH2",
      "path": "54",
      "value": "0x75"
    },
    "110": {
      "fn": "CrypticRaffle.newRaffle",
      "offset": [
        565,
        708
      ],
      "op": "CALLDATASIZE",
      "path": "54"
    },
    "111": {
      "fn": "CrypticRaffle.newRaffle",
      "offset": [
        565,
        708
      ],
      "op": "PUSH1",
      "path": "54",
      "value": "0x4"
    },
    "113": {
      "fn": "CrypticRaffle.newRaffle",
      "offset": [
        565,
        708
      ],
      "op": "PUSH2",
      "path": "54",
      "value": "0x535"
    },
    "116": {
      "fn": "CrypticRaffle.newRaffle",
      "jump": "i",
      "offset": [
        565,
        708
      ],
      "op": "JUMP",
      "path": "54"
    },
    "117": {
      "fn": "CrypticRaffle.newRaffle",
      "offset": [
        565,
        708
      ],
      "op": "JUMPDEST",
      "path": "54"
    },
    "118": {
      "fn": "CrypticRaffle.newRaffle",
      "offset": [
        565,
        708
      ],
      "op": "PUSH2",
      "path": "54",
      "value": "0x11A"
    },
    "121": {
      "fn": "CrypticRaffle.newRaffle",
      "jump": "i",
      "offset": [
        565,
        708
      ],
      "op": "JUMP",
      "path": "54"
    },
    "122": {
      "fn": "CrypticRaffle.newRaffle",
      "offset": [
        565,
        708
      ],
      "op": "JUMPDEST",
      "path": "54"
    },
    "123": {
      "fn": "CrypticRaffle.newRaffle",
      "offset": [
        565,
        708
      ],
      "op": "STOP",
      "path": "54"
    },
    "124": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1831,
        1932
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "125": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1831,
        1932
      ],
      "op": "CALLVALUE",
      "path": "0"
    },
    "126": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1831,
        1932
      ],
      "op": "DUP1",
      "path": "0"
    },
    "127": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1831,
        1932
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "128": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1831,
        1932
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x88"
    },
    "131": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1831,
        1932
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "132": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1831,
        1932
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "134": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1831,
        1932
      ],
      "op": "DUP1",
      "path": "0"
    },
    "135": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1831,
        1932
      ],
      "op": "REVERT",
      "path": "0"
    },
    "136": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1831,
        1932
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "137": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1831,
        1932
      ],
      "op": "POP",
      "path": "0"
    },
    "138": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1831,
        1932
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x7A"
    },
    "141": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1831,
        1932
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x168"
    },
    "144": {
      "fn": "Ownable.renounceOwnership",
      "jump": "i",
      "offset": [
        1831,
        1932
      ],
      "op": "JUMP",
      "path": "0"
    },
    "145": {
      "fn": "Ownable.owner",
      "offset": [
        1201,
        1286
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "146": {
      "fn": "Ownable.owner",
      "offset": [
        1201,
        1286
      ],
      "op": "CALLVALUE",
      "path": "0"
    },
    "147": {
      "fn": "Ownable.owner",
      "offset": [
        1201,
        1286
      ],
      "op": "DUP1",
      "path": "0"
    },
    "148": {
      "fn": "Ownable.owner",
      "offset": [
        1201,
        1286
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "149": {
      "fn": "Ownable.owner",
      "offset": [
        1201,
        1286
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x9D"
    },
    "152": {
      "fn": "Ownable.owner",
      "offset": [
        1201,
        1286
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "153": {
      "fn": "Ownable.owner",
      "offset": [
        1201,
        1286
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "155": {
      "fn": "Ownable.owner",
      "offset": [
        1201,
        1286
      ],
      "op": "DUP1",
      "path": "0"
    },
    "156": {
      "fn": "Ownable.owner",
      "offset": [
        1201,
        1286
      ],
      "op": "REVERT",
      "path": "0"
    },
    "157": {
      "fn": "Ownable.owner",
      "offset": [
        1201,
        1286
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "158": {
      "op": "POP"
    },
    "159": {
      "fn": "Ownable.owner",
      "offset": [
        1247,
        1254
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "161": {
      "fn": "Ownable.owner",
      "offset": [
        1273,
        1279
      ],
      "op": "SLOAD",
      "path": "0",
      "statement": 0
    },
    "162": {
      "fn": "Ownable.owner",
      "offset": [
        1201,
        1286
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "164": {
      "fn": "Ownable.owner",
      "offset": [
        1201,
        1286
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "165": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "167": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "169": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "171": {
      "op": "SHL"
    },
    "172": {
      "op": "SUB"
    },
    "173": {
      "fn": "Ownable.owner",
      "offset": [
        1273,
        1279
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "174": {
      "fn": "Ownable.owner",
      "offset": [
        1273,
        1279
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "175": {
      "fn": "Ownable.owner",
      "offset": [
        1273,
        1279
      ],
      "op": "AND",
      "path": "0"
    },
    "176": {
      "op": "DUP2"
    },
    "177": {
      "op": "MSTORE"
    },
    "178": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "180": {
      "op": "ADD"
    },
    "181": {
      "fn": "Ownable.owner",
      "offset": [
        1201,
        1286
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "182": {
      "fn": "Ownable.owner",
      "offset": [
        1201,
        1286
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "184": {
      "fn": "Ownable.owner",
      "offset": [
        1201,
        1286
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "185": {
      "fn": "Ownable.owner",
      "offset": [
        1201,
        1286
      ],
      "op": "DUP1",
      "path": "0"
    },
    "186": {
      "fn": "Ownable.owner",
      "offset": [
        1201,
        1286
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "187": {
      "fn": "Ownable.owner",
      "offset": [
        1201,
        1286
      ],
      "op": "SUB",
      "path": "0"
    },
    "188": {
      "fn": "Ownable.owner",
      "offset": [
        1201,
        1286
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "189": {
      "fn": "Ownable.owner",
      "offset": [
        1201,
        1286
      ],
      "op": "RETURN",
      "path": "0"
    },
    "190": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        712,
        1529
      ],
      "op": "JUMPDEST",
      "path": "54"
    },
    "191": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        712,
        1529
      ],
      "op": "PUSH2",
      "path": "54",
      "value": "0x7A"
    },
    "194": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        712,
        1529
      ],
      "op": "PUSH2",
      "path": "54",
      "value": "0xCC"
    },
    "197": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        712,
        1529
      ],
      "op": "CALLDATASIZE",
      "path": "54"
    },
    "198": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        712,
        1529
      ],
      "op": "PUSH1",
      "path": "54",
      "value": "0x4"
    },
    "200": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        712,
        1529
      ],
      "op": "PUSH2",
      "path": "54",
      "value": "0x535"
    },
    "203": {
      "fn": "CrypticRaffle.guessNumbers",
      "jump": "i",
      "offset": [
        712,
        1529
      ],
      "op": "JUMP",
      "path": "54"
    },
    "204": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        712,
        1529
      ],
      "op": "JUMPDEST",
      "path": "54"
    },
    "205": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        712,
        1529
      ],
      "op": "PUSH2",
      "path": "54",
      "value": "0x17C"
    },
    "208": {
      "fn": "CrypticRaffle.guessNumbers",
      "jump": "i",
      "offset": [
        712,
        1529
      ],
      "op": "JUMP",
      "path": "54"
    },
    "209": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        2081,
        2279
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "210": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        2081,
        2279
      ],
      "op": "CALLVALUE",
      "path": "0"
    },
    "211": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        2081,
        2279
      ],
      "op": "DUP1",
      "path": "0"
    },
    "212": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        2081,
        2279
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "213": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        2081,
        2279
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xDD"
    },
    "216": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        2081,
        2279
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "217": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        2081,
        2279
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "219": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        2081,
        2279
      ],
      "op": "DUP1",
      "path": "0"
    },
    "220": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        2081,
        2279
      ],
      "op": "REVERT",
      "path": "0"
    },
    "221": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        2081,
        2279
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "222": {
      "op": "POP"
    },
    "223": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        2081,
        2279
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x7A"
    },
    "226": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        2081,
        2279
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xEC"
    },
    "229": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        2081,
        2279
      ],
      "op": "CALLDATASIZE",
      "path": "0"
    },
    "230": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        2081,
        2279
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "232": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        2081,
        2279
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x55D"
    },
    "235": {
      "fn": "Ownable.transferOwnership",
      "jump": "i",
      "offset": [
        2081,
        2279
      ],
      "op": "JUMP",
      "path": "0"
    },
    "236": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        2081,
        2279
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "237": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        2081,
        2279
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x367"
    },
    "240": {
      "fn": "Ownable.transferOwnership",
      "jump": "i",
      "offset": [
        2081,
        2279
      ],
      "op": "JUMP",
      "path": "0"
    },
    "241": {
      "offset": [
        315,
        372
      ],
      "op": "JUMPDEST",
      "path": "54"
    },
    "242": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        315,
        372
      ],
      "op": "CALLVALUE",
      "path": "54"
    },
    "243": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        315,
        372
      ],
      "op": "DUP1",
      "path": "54"
    },
    "244": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        315,
        372
      ],
      "op": "ISZERO",
      "path": "54"
    },
    "245": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        315,
        372
      ],
      "op": "PUSH2",
      "path": "54",
      "value": "0xFD"
    },
    "248": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        315,
        372
      ],
      "op": "JUMPI",
      "path": "54"
    },
    "249": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        315,
        372
      ],
      "op": "PUSH1",
      "path": "54",
      "value": "0x0"
    },
    "251": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        315,
        372
      ],
      "op": "DUP1",
      "path": "54"
    },
    "252": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        315,
        372
      ],
      "op": "REVERT",
      "path": "54"
    },
    "253": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        315,
        372
      ],
      "op": "JUMPDEST",
      "path": "54"
    },
    "254": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        315,
        372
      ],
      "op": "POP",
      "path": "54"
    },
    "255": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        315,
        372
      ],
      "op": "PUSH2",
      "path": "54",
      "value": "0x10C"
    },
    "258": {
      "offset": [
        362,
        372
      ],
      "op": "PUSH7",
      "path": "54",
      "value": "0x2386F26FC10000"
    },
    "266": {
      "offset": [
        315,
        372
      ],
      "op": "DUP2",
      "path": "54"
    },
    "267": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        315,
        372
      ],
      "op": "JUMP",
      "path": "54"
    },
    "268": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        315,
        372
      ],
      "op": "JUMPDEST",
      "path": "54"
    },
    "269": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        315,
        372
      ],
      "op": "PUSH1",
      "path": "54",
      "value": "0x40"
    },
    "271": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        315,
        372
      ],
      "op": "MLOAD",
      "path": "54"
    },
    "272": {
      "op": "SWAP1"
    },
    "273": {
      "op": "DUP2"
    },
    "274": {
      "op": "MSTORE"
    },
    "275": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "277": {
      "op": "ADD"
    },
    "278": {
      "offset": [
        315,
        372
      ],
      "op": "PUSH2",
      "path": "54",
      "value": "0xB5"
    },
    "281": {
      "op": "JUMP"
    },
    "282": {
      "fn": "CrypticRaffle.newRaffle",
      "offset": [
        565,
        708
      ],
      "op": "JUMPDEST",
      "path": "54"
    },
    "283": {
      "offset": [
        1094,
        1107
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x122"
    },
    "286": {
      "offset": [
        1094,
        1105
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x3E0"
    },
    "289": {
      "jump": "i",
      "offset": [
        1094,
        1107
      ],
      "op": "JUMP",
      "path": "0"
    },
    "290": {
      "fn": "CrypticRaffle.newRaffle",
      "offset": [
        1094,
        1107
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "291": {
      "fn": "CrypticRaffle.newRaffle",
      "offset": [
        648,
        649
      ],
      "op": "PUSH1",
      "path": "54",
      "statement": 1,
      "value": "0x1"
    },
    "293": {
      "fn": "CrypticRaffle.newRaffle",
      "offset": [
        636,
        644
      ],
      "op": "PUSH1",
      "path": "54",
      "value": "0x3"
    },
    "295": {
      "fn": "CrypticRaffle.newRaffle",
      "offset": [
        636,
        644
      ],
      "op": "PUSH1",
      "path": "54",
      "value": "0x0"
    },
    "297": {
      "fn": "CrypticRaffle.newRaffle",
      "offset": [
        636,
        649
      ],
      "op": "DUP3",
      "path": "54"
    },
    "298": {
      "fn": "CrypticRaffle.newRaffle",
      "offset": [
        636,
        649
      ],
      "op": "DUP3",
      "path": "54"
    },
    "299": {
      "fn": "CrypticRaffle.newRaffle",
      "offset": [
        636,
        649
      ],
      "op": "SLOAD",
      "path": "54"
    },
    "300": {
      "fn": "CrypticRaffle.newRaffle",
      "offset": [
        636,
        649
      ],
      "op": "PUSH2",
      "path": "54",
      "value": "0x135"
    },
    "303": {
      "fn": "CrypticRaffle.newRaffle",
      "offset": [
        636,
        649
      ],
      "op": "SWAP2",
      "path": "54"
    },
    "304": {
      "fn": "CrypticRaffle.newRaffle",
      "offset": [
        636,
        649
      ],
      "op": "SWAP1",
      "path": "54"
    },
    "305": {
      "fn": "CrypticRaffle.newRaffle",
      "offset": [
        636,
        649
      ],
      "op": "PUSH2",
      "path": "54",
      "value": "0x5A3"
    },
    "308": {
      "fn": "CrypticRaffle.newRaffle",
      "jump": "i",
      "offset": [
        636,
        649
      ],
      "op": "JUMP",
      "path": "54"
    },
    "309": {
      "fn": "CrypticRaffle.newRaffle",
      "offset": [
        636,
        649
      ],
      "op": "JUMPDEST",
      "path": "54"
    },
    "310": {
      "fn": "CrypticRaffle.newRaffle",
      "offset": [
        636,
        649
      ],
      "op": "SWAP1",
      "path": "54"
    },
    "311": {
      "fn": "CrypticRaffle.newRaffle",
      "offset": [
        636,
        649
      ],
      "op": "SWAP2",
      "path": "54"
    },
    "312": {
      "fn": "CrypticRaffle.newRaffle",
      "offset": [
        636,
        649
      ],
      "op": "SSTORE",
      "path": "54"
    },
    "313": {
      "op": "POP"
    },
    "314": {
      "op": "POP"
    },
    "315": {
      "fn": "CrypticRaffle.newRaffle",
      "offset": [
        663,
        671
      ],
      "op": "PUSH1",
      "path": "54",
      "statement": 2,
      "value": "0x3"
    },
    "317": {
      "fn": "CrypticRaffle.newRaffle",
      "offset": [
        663,
        671
      ],
      "op": "DUP1",
      "path": "54"
    },
    "318": {
      "fn": "CrypticRaffle.newRaffle",
      "offset": [
        663,
        671
      ],
      "op": "SLOAD",
      "path": "54"
    },
    "319": {
      "fn": "CrypticRaffle.newRaffle",
      "offset": [
        655,
        672
      ],
      "op": "PUSH1",
      "path": "54",
      "value": "0x0"
    },
    "321": {
      "fn": "CrypticRaffle.newRaffle",
      "offset": [
        655,
        672
      ],
      "op": "SWAP1",
      "path": "54"
    },
    "322": {
      "fn": "CrypticRaffle.newRaffle",
      "offset": [
        655,
        672
      ],
      "op": "DUP2",
      "path": "54"
    },
    "323": {
      "fn": "CrypticRaffle.newRaffle",
      "offset": [
        655,
        672
      ],
      "op": "MSTORE",
      "path": "54"
    },
    "324": {
      "fn": "CrypticRaffle.newRaffle",
      "offset": [
        655,
        662
      ],
      "op": "PUSH1",
      "path": "54",
      "value": "0x4"
    },
    "326": {
      "fn": "CrypticRaffle.newRaffle",
      "offset": [
        655,
        672
      ],
      "op": "PUSH1",
      "path": "54",
      "value": "0x20"
    },
    "328": {
      "fn": "CrypticRaffle.newRaffle",
      "offset": [
        655,
        672
      ],
      "op": "MSTORE",
      "path": "54"
    },
    "329": {
      "fn": "CrypticRaffle.newRaffle",
      "offset": [
        655,
        672
      ],
      "op": "PUSH1",
      "path": "54",
      "value": "0x40"
    },
    "331": {
      "fn": "CrypticRaffle.newRaffle",
      "offset": [
        655,
        672
      ],
      "op": "SWAP1",
      "path": "54"
    },
    "332": {
      "fn": "CrypticRaffle.newRaffle",
      "offset": [
        655,
        672
      ],
      "op": "KECCAK256",
      "path": "54"
    },
    "333": {
      "fn": "CrypticRaffle.newRaffle",
      "offset": [
        655,
        682
      ],
      "op": "PUSH2",
      "path": "54",
      "value": "0x157"
    },
    "336": {
      "fn": "CrypticRaffle.newRaffle",
      "offset": [
        655,
        682
      ],
      "op": "SWAP2",
      "path": "54"
    },
    "337": {
      "fn": "CrypticRaffle.newRaffle",
      "offset": [
        675,
        682
      ],
      "op": "DUP4",
      "path": "54"
    },
    "338": {
      "fn": "CrypticRaffle.newRaffle",
      "offset": [
        675,
        682
      ],
      "op": "SWAP1",
      "path": "54"
    },
    "339": {
      "fn": "CrypticRaffle.newRaffle",
      "offset": [
        655,
        682
      ],
      "op": "PUSH2",
      "path": "54",
      "value": "0x48A"
    },
    "342": {
      "fn": "CrypticRaffle.newRaffle",
      "jump": "i",
      "offset": [
        655,
        682
      ],
      "op": "JUMP",
      "path": "54"
    },
    "343": {
      "fn": "CrypticRaffle.newRaffle",
      "offset": [
        655,
        682
      ],
      "op": "JUMPDEST",
      "path": "54"
    },
    "344": {
      "op": "POP"
    },
    "345": {
      "op": "POP"
    },
    "346": {
      "fn": "CrypticRaffle.newRaffle",
      "offset": [
        688,
        696
      ],
      "op": "PUSH1",
      "path": "54",
      "statement": 3,
      "value": "0x2"
    },
    "348": {
      "fn": "CrypticRaffle.newRaffle",
      "offset": [
        688,
        703
      ],
      "op": "DUP1",
      "path": "54"
    },
    "349": {
      "fn": "CrypticRaffle.newRaffle",
      "offset": [
        688,
        703
      ],
      "op": "SLOAD",
      "path": "54"
    },
    "350": {
      "op": "PUSH1",
      "value": "0xFF"
    },
    "352": {
      "op": "NOT"
    },
    "353": {
      "fn": "CrypticRaffle.newRaffle",
      "offset": [
        688,
        703
      ],
      "op": "AND",
      "path": "54"
    },
    "354": {
      "fn": "CrypticRaffle.newRaffle",
      "offset": [
        699,
        703
      ],
      "op": "PUSH1",
      "path": "54",
      "value": "0x1"
    },
    "356": {
      "fn": "CrypticRaffle.newRaffle",
      "offset": [
        688,
        703
      ],
      "op": "OR",
      "path": "54"
    },
    "357": {
      "fn": "CrypticRaffle.newRaffle",
      "offset": [
        688,
        703
      ],
      "op": "SWAP1",
      "path": "54"
    },
    "358": {
      "fn": "CrypticRaffle.newRaffle",
      "offset": [
        688,
        703
      ],
      "op": "SSTORE",
      "path": "54"
    },
    "359": {
      "fn": "CrypticRaffle.newRaffle",
      "jump": "o",
      "offset": [
        565,
        708
      ],
      "op": "JUMP",
      "path": "54"
    },
    "360": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1831,
        1932
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "361": {
      "offset": [
        1094,
        1107
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x170"
    },
    "364": {
      "offset": [
        1094,
        1105
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x3E0"
    },
    "367": {
      "jump": "i",
      "offset": [
        1094,
        1107
      ],
      "op": "JUMP",
      "path": "0"
    },
    "368": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1094,
        1107
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "369": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1895,
        1925
      ],
      "op": "PUSH2",
      "path": "0",
      "statement": 4,
      "value": "0x17A"
    },
    "372": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1922,
        1923
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "374": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1895,
        1913
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x43A"
    },
    "377": {
      "fn": "Ownable.renounceOwnership",
      "jump": "i",
      "offset": [
        1895,
        1925
      ],
      "op": "JUMP",
      "path": "0"
    },
    "378": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1895,
        1925
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "379": {
      "fn": "Ownable.renounceOwnership",
      "jump": "o",
      "offset": [
        1831,
        1932
      ],
      "op": "JUMP",
      "path": "0"
    },
    "380": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        712,
        1529
      ],
      "op": "JUMPDEST",
      "path": "54"
    },
    "381": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        793,
        801
      ],
      "op": "PUSH1",
      "path": "54",
      "statement": 5,
      "value": "0x2"
    },
    "383": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        793,
        801
      ],
      "op": "SLOAD",
      "path": "54"
    },
    "384": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        793,
        801
      ],
      "op": "PUSH1",
      "path": "54",
      "value": "0xFF"
    },
    "386": {
      "branch": 17,
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        793,
        801
      ],
      "op": "AND",
      "path": "54"
    },
    "387": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        785,
        826
      ],
      "op": "PUSH2",
      "path": "54",
      "value": "0x1CA"
    },
    "390": {
      "branch": 17,
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        785,
        826
      ],
      "op": "JUMPI",
      "path": "54"
    },
    "391": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        785,
        826
      ],
      "op": "PUSH1",
      "path": "54",
      "value": "0x40"
    },
    "393": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        785,
        826
      ],
      "op": "MLOAD",
      "path": "54"
    },
    "394": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "398": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "400": {
      "op": "SHL"
    },
    "401": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        785,
        826
      ],
      "op": "DUP2",
      "path": "54"
    },
    "402": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        785,
        826
      ],
      "op": "MSTORE",
      "path": "54"
    },
    "403": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "405": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        785,
        826
      ],
      "op": "PUSH1",
      "path": "54",
      "value": "0x4"
    },
    "407": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        785,
        826
      ],
      "op": "DUP3",
      "path": "54"
    },
    "408": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        785,
        826
      ],
      "op": "ADD",
      "path": "54"
    },
    "409": {
      "op": "MSTORE"
    },
    "410": {
      "op": "PUSH1",
      "value": "0x14"
    },
    "412": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "414": {
      "op": "DUP3"
    },
    "415": {
      "op": "ADD"
    },
    "416": {
      "op": "MSTORE"
    },
    "417": {
      "op": "PUSH20",
      "value": "0x526166666C65206973206E6F7420616374697665"
    },
    "438": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "440": {
      "op": "SHL"
    },
    "441": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "443": {
      "op": "DUP3"
    },
    "444": {
      "op": "ADD"
    },
    "445": {
      "op": "MSTORE"
    },
    "446": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "448": {
      "op": "ADD"
    },
    "449": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        785,
        826
      ],
      "op": "JUMPDEST",
      "path": "54"
    },
    "450": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        785,
        826
      ],
      "op": "PUSH1",
      "path": "54",
      "value": "0x40"
    },
    "452": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        785,
        826
      ],
      "op": "MLOAD",
      "path": "54"
    },
    "453": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        785,
        826
      ],
      "op": "DUP1",
      "path": "54"
    },
    "454": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        785,
        826
      ],
      "op": "SWAP2",
      "path": "54"
    },
    "455": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        785,
        826
      ],
      "op": "SUB",
      "path": "54"
    },
    "456": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        785,
        826
      ],
      "op": "SWAP1",
      "path": "54"
    },
    "457": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        785,
        826
      ],
      "op": "REVERT",
      "optimizer_revert": true,
      "path": "54"
    },
    "458": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        785,
        826
      ],
      "op": "JUMPDEST",
      "path": "54"
    },
    "459": {
      "offset": [
        362,
        372
      ],
      "op": "PUSH7",
      "path": "54",
      "value": "0x2386F26FC10000"
    },
    "467": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        904,
        913
      ],
      "op": "CALLVALUE",
      "path": "54",
      "statement": 6
    },
    "468": {
      "branch": 18,
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        904,
        937
      ],
      "op": "EQ",
      "path": "54"
    },
    "469": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        896,
        979
      ],
      "op": "PUSH2",
      "path": "54",
      "value": "0x22E"
    },
    "472": {
      "branch": 18,
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        896,
        979
      ],
      "op": "JUMPI",
      "path": "54"
    },
    "473": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        896,
        979
      ],
      "op": "PUSH1",
      "path": "54",
      "value": "0x40"
    },
    "475": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        896,
        979
      ],
      "op": "MLOAD",
      "path": "54"
    },
    "476": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "480": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "482": {
      "op": "SHL"
    },
    "483": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        896,
        979
      ],
      "op": "DUP2",
      "path": "54"
    },
    "484": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        896,
        979
      ],
      "op": "MSTORE",
      "path": "54"
    },
    "485": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "487": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        896,
        979
      ],
      "op": "PUSH1",
      "path": "54",
      "value": "0x4"
    },
    "489": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        896,
        979
      ],
      "op": "DUP3",
      "path": "54"
    },
    "490": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        896,
        979
      ],
      "op": "ADD",
      "path": "54"
    },
    "491": {
      "op": "MSTORE"
    },
    "492": {
      "op": "PUSH1",
      "value": "0x25"
    },
    "494": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "496": {
      "op": "DUP3"
    },
    "497": {
      "op": "ADD"
    },
    "498": {
      "op": "MSTORE"
    },
    "499": {
      "op": "PUSH32",
      "value": "0x796F752073686F756C642070617920302E312065746820746F20706172746963"
    },
    "532": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "534": {
      "op": "DUP3"
    },
    "535": {
      "op": "ADD"
    },
    "536": {
      "op": "MSTORE"
    },
    "537": {
      "op": "PUSH5",
      "value": "0x6970617465"
    },
    "543": {
      "op": "PUSH1",
      "value": "0xD8"
    },
    "545": {
      "op": "SHL"
    },
    "546": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "548": {
      "op": "DUP3"
    },
    "549": {
      "op": "ADD"
    },
    "550": {
      "op": "MSTORE"
    },
    "551": {
      "op": "PUSH1",
      "value": "0x84"
    },
    "553": {
      "op": "ADD"
    },
    "554": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        896,
        979
      ],
      "op": "PUSH2",
      "path": "54",
      "value": "0x1C1"
    },
    "557": {
      "op": "JUMP"
    },
    "558": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        896,
        979
      ],
      "op": "JUMPDEST",
      "path": "54"
    },
    "559": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        1002,
        1006
      ],
      "op": "PUSH1",
      "path": "54",
      "value": "0x1"
    },
    "561": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        986,
        999
      ],
      "op": "PUSH1",
      "path": "54",
      "value": "0x0"
    },
    "563": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        1099,
        1275
      ],
      "op": "JUMPDEST",
      "path": "54"
    },
    "564": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        1118,
        1119
      ],
      "op": "PUSH1",
      "path": "54",
      "value": "0x3"
    },
    "566": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        1114,
        1115
      ],
      "op": "DUP2",
      "path": "54"
    },
    "567": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        1114,
        1119
      ],
      "op": "PUSH1",
      "path": "54",
      "value": "0xFF"
    },
    "569": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        1114,
        1119
      ],
      "op": "AND",
      "path": "54"
    },
    "570": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        1114,
        1119
      ],
      "op": "LT",
      "path": "54"
    },
    "571": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        1099,
        1275
      ],
      "op": "ISZERO",
      "path": "54"
    },
    "572": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        1099,
        1275
      ],
      "op": "PUSH2",
      "path": "54",
      "value": "0x2C3"
    },
    "575": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        1099,
        1275
      ],
      "op": "JUMPI",
      "path": "54"
    },
    "576": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        1220,
        1228
      ],
      "op": "PUSH1",
      "path": "54",
      "value": "0x3"
    },
    "578": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        1220,
        1228
      ],
      "op": "DUP1",
      "path": "54"
    },
    "579": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        1220,
        1228
      ],
      "op": "SLOAD",
      "path": "54"
    },
    "580": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        1212,
        1229
      ],
      "op": "PUSH1",
      "path": "54",
      "value": "0x0"
    },
    "582": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        1212,
        1229
      ],
      "op": "SWAP1",
      "path": "54"
    },
    "583": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        1212,
        1229
      ],
      "op": "DUP2",
      "path": "54"
    },
    "584": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        1212,
        1229
      ],
      "op": "MSTORE",
      "path": "54"
    },
    "585": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        1212,
        1219
      ],
      "op": "PUSH1",
      "path": "54",
      "value": "0x4"
    },
    "587": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        1212,
        1229
      ],
      "op": "PUSH1",
      "path": "54",
      "value": "0x20"
    },
    "589": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        1212,
        1229
      ],
      "op": "MSTORE",
      "path": "54"
    },
    "590": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        1212,
        1229
      ],
      "op": "PUSH1",
      "path": "54",
      "value": "0x40"
    },
    "592": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        1212,
        1229
      ],
      "op": "SWAP1",
      "path": "54"
    },
    "593": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        1212,
        1229
      ],
      "op": "KECCAK256",
      "path": "54"
    },
    "594": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        1212,
        1229
      ],
      "op": "SWAP1",
      "path": "54"
    },
    "595": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        1212,
        1232
      ],
      "op": "PUSH1",
      "path": "54",
      "value": "0xFF"
    },
    "597": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        1212,
        1232
      ],
      "op": "DUP4",
      "path": "54"
    },
    "598": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        1212,
        1232
      ],
      "op": "AND",
      "path": "54"
    },
    "599": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        1212,
        1232
      ],
      "op": "SWAP1",
      "path": "54"
    },
    "600": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        1212,
        1232
      ],
      "op": "DUP2",
      "path": "54"
    },
    "601": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        1212,
        1232
      ],
      "op": "LT",
      "path": "54"
    },
    "602": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        1212,
        1232
      ],
      "op": "PUSH2",
      "path": "54",
      "value": "0x265"
    },
    "605": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        1212,
        1232
      ],
      "op": "JUMPI",
      "path": "54"
    },
    "606": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        1212,
        1232
      ],
      "op": "PUSH2",
      "path": "54",
      "value": "0x265"
    },
    "609": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        1212,
        1232
      ],
      "op": "PUSH2",
      "path": "54",
      "value": "0x5BC"
    },
    "612": {
      "fn": "CrypticRaffle.guessNumbers",
      "jump": "i",
      "offset": [
        1212,
        1232
      ],
      "op": "JUMP",
      "path": "54"
    },
    "613": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        1212,
        1232
      ],
      "op": "JUMPDEST",
      "path": "54"
    },
    "614": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        1212,
        1232
      ],
      "op": "PUSH1",
      "path": "54",
      "value": "0x20"
    },
    "616": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        1212,
        1232
      ],
      "op": "DUP2",
      "path": "54"
    },
    "617": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        1212,
        1232
      ],
      "op": "DIV",
      "path": "54"
    },
    "618": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        1212,
        1232
      ],
      "op": "SWAP1",
      "path": "54"
    },
    "619": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        1212,
        1232
      ],
      "op": "SWAP2",
      "path": "54"
    },
    "620": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        1212,
        1232
      ],
      "op": "ADD",
      "path": "54"
    },
    "621": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        1212,
        1232
      ],
      "op": "SLOAD",
      "path": "54"
    },
    "622": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        1212,
        1232
      ],
      "op": "PUSH1",
      "path": "54",
      "value": "0xFF"
    },
    "624": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        1212,
        1232
      ],
      "op": "PUSH1",
      "path": "54",
      "value": "0x1F"
    },
    "626": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        1212,
        1232
      ],
      "op": "SWAP1",
      "path": "54"
    },
    "627": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        1212,
        1232
      ],
      "op": "SWAP3",
      "path": "54"
    },
    "628": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        1212,
        1232
      ],
      "op": "AND",
      "path": "54"
    },
    "629": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        1212,
        1232
      ],
      "op": "PUSH2",
      "path": "54",
      "value": "0x100"
    },
    "632": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        1212,
        1232
      ],
      "op": "EXP",
      "path": "54"
    },
    "633": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        1212,
        1232
      ],
      "op": "SWAP1",
      "path": "54"
    },
    "634": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        1212,
        1232
      ],
      "op": "DIV",
      "path": "54"
    },
    "635": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        1212,
        1232
      ],
      "op": "DUP2",
      "path": "54"
    },
    "636": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        1212,
        1232
      ],
      "op": "AND",
      "path": "54"
    },
    "637": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        1212,
        1232
      ],
      "op": "SWAP1",
      "path": "54"
    },
    "638": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        1198,
        1205
      ],
      "op": "DUP5",
      "path": "54"
    },
    "639": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        1198,
        1205
      ],
      "op": "SWAP1",
      "path": "54"
    },
    "640": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        1198,
        1208
      ],
      "op": "DUP4",
      "path": "54"
    },
    "641": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        1198,
        1208
      ],
      "op": "AND",
      "path": "54"
    },
    "642": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        1198,
        1208
      ],
      "op": "PUSH1",
      "path": "54",
      "value": "0x3"
    },
    "644": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        1198,
        1208
      ],
      "op": "DUP2",
      "path": "54"
    },
    "645": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        1198,
        1208
      ],
      "op": "LT",
      "path": "54"
    },
    "646": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        1198,
        1208
      ],
      "op": "PUSH2",
      "path": "54",
      "value": "0x291"
    },
    "649": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        1198,
        1208
      ],
      "op": "JUMPI",
      "path": "54"
    },
    "650": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        1198,
        1208
      ],
      "op": "PUSH2",
      "path": "54",
      "value": "0x291"
    },
    "653": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        1198,
        1208
      ],
      "op": "PUSH2",
      "path": "54",
      "value": "0x5BC"
    },
    "656": {
      "fn": "CrypticRaffle.guessNumbers",
      "jump": "i",
      "offset": [
        1198,
        1208
      ],
      "op": "JUMP",
      "path": "54"
    },
    "657": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        1198,
        1208
      ],
      "op": "JUMPDEST",
      "path": "54"
    },
    "658": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        1198,
        1208
      ],
      "op": "PUSH1",
      "path": "54",
      "value": "0x20"
    },
    "660": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        1198,
        1208
      ],
      "op": "MUL",
      "path": "54"
    },
    "661": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        1198,
        1208
      ],
      "op": "ADD",
      "path": "54"
    },
    "662": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        1198,
        1208
      ],
      "op": "PUSH1",
      "path": "54",
      "value": "0x20"
    },
    "664": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        1198,
        1208
      ],
      "op": "DUP2",
      "path": "54"
    },
    "665": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        1198,
        1208
      ],
      "op": "ADD",
      "path": "54"
    },
    "666": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        1198,
        1208
      ],
      "op": "SWAP1",
      "path": "54"
    },
    "667": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        1198,
        1208
      ],
      "op": "PUSH2",
      "path": "54",
      "value": "0x2A4"
    },
    "670": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        1198,
        1208
      ],
      "op": "SWAP2",
      "path": "54"
    },
    "671": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        1198,
        1208
      ],
      "op": "SWAP1",
      "path": "54"
    },
    "672": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        1198,
        1208
      ],
      "op": "PUSH2",
      "path": "54",
      "value": "0x5D2"
    },
    "675": {
      "fn": "CrypticRaffle.guessNumbers",
      "jump": "i",
      "offset": [
        1198,
        1208
      ],
      "op": "JUMP",
      "path": "54"
    },
    "676": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        1198,
        1208
      ],
      "op": "JUMPDEST",
      "path": "54"
    },
    "677": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        1198,
        1232
      ],
      "op": "PUSH1",
      "path": "54",
      "value": "0xFF"
    },
    "679": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        1198,
        1232
      ],
      "op": "AND",
      "path": "54"
    },
    "680": {
      "branch": 19,
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        1198,
        1232
      ],
      "op": "EQ",
      "path": "54"
    },
    "681": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        1195,
        1269
      ],
      "op": "PUSH2",
      "path": "54",
      "value": "0x2B1"
    },
    "684": {
      "branch": 19,
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        1195,
        1269
      ],
      "op": "JUMPI",
      "path": "54"
    },
    "685": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        1255,
        1260
      ],
      "op": "PUSH1",
      "path": "54",
      "statement": 7,
      "value": "0x0"
    },
    "687": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        1244,
        1260
      ],
      "op": "SWAP2",
      "path": "54"
    },
    "688": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        1244,
        1260
      ],
      "op": "POP",
      "path": "54"
    },
    "689": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        1195,
        1269
      ],
      "op": "JUMPDEST",
      "path": "54"
    },
    "690": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        1121,
        1124
      ],
      "op": "DUP1",
      "path": "54",
      "statement": 8
    },
    "691": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        1121,
        1124
      ],
      "op": "PUSH2",
      "path": "54",
      "value": "0x2BB"
    },
    "694": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        1121,
        1124
      ],
      "op": "DUP2",
      "path": "54"
    },
    "695": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        1121,
        1124
      ],
      "op": "PUSH2",
      "path": "54",
      "value": "0x5F5"
    },
    "698": {
      "fn": "CrypticRaffle.guessNumbers",
      "jump": "i",
      "offset": [
        1121,
        1124
      ],
      "op": "JUMP",
      "path": "54"
    },
    "699": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        1121,
        1124
      ],
      "op": "JUMPDEST",
      "path": "54"
    },
    "700": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        1121,
        1124
      ],
      "op": "SWAP2",
      "path": "54"
    },
    "701": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        1121,
        1124
      ],
      "op": "POP",
      "path": "54"
    },
    "702": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        1121,
        1124
      ],
      "op": "POP",
      "path": "54"
    },
    "703": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        1099,
        1275
      ],
      "op": "PUSH2",
      "path": "54",
      "value": "0x233"
    },
    "706": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        1099,
        1275
      ],
      "op": "JUMP",
      "path": "54"
    },
    "707": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        1099,
        1275
      ],
      "op": "JUMPDEST",
      "path": "54"
    },
    "708": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        1099,
        1275
      ],
      "op": "POP",
      "path": "54"
    },
    "709": {
      "branch": 20,
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        1368,
        1376
      ],
      "op": "DUP1",
      "path": "54"
    },
    "710": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        1365,
        1525
      ],
      "op": "ISZERO",
      "path": "54"
    },
    "711": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        1365,
        1525
      ],
      "op": "PUSH2",
      "path": "54",
      "value": "0x363"
    },
    "714": {
      "branch": 20,
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        1365,
        1525
      ],
      "op": "JUMPI",
      "path": "54"
    },
    "715": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        1386,
        1394
      ],
      "op": "PUSH1",
      "path": "54",
      "statement": 9,
      "value": "0x2"
    },
    "717": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        1386,
        1402
      ],
      "op": "DUP1",
      "path": "54"
    },
    "718": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        1386,
        1402
      ],
      "op": "SLOAD",
      "path": "54"
    },
    "719": {
      "op": "PUSH1",
      "value": "0xFF"
    },
    "721": {
      "op": "NOT"
    },
    "722": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        1386,
        1402
      ],
      "op": "AND",
      "path": "54"
    },
    "723": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        1386,
        1402
      ],
      "op": "SWAP1",
      "path": "54"
    },
    "724": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        1386,
        1402
      ],
      "op": "SSTORE",
      "path": "54"
    },
    "725": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        1426,
        1475
      ],
      "op": "PUSH1",
      "path": "54",
      "value": "0x40"
    },
    "727": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        1426,
        1475
      ],
      "op": "MLOAD",
      "path": "54"
    },
    "728": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "730": {
      "op": "SWAP1"
    },
    "731": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        1426,
        1436
      ],
      "op": "CALLER",
      "path": "54"
    },
    "732": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        1426,
        1436
      ],
      "op": "SWAP1",
      "path": "54"
    },
    "733": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        1449,
        1470
      ],
      "op": "SELFBALANCE",
      "path": "54"
    },
    "734": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        1449,
        1470
      ],
      "op": "SWAP1",
      "path": "54"
    },
    "735": {
      "op": "DUP4"
    },
    "736": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        1426,
        1475
      ],
      "op": "DUP2",
      "path": "54"
    },
    "737": {
      "op": "DUP2"
    },
    "738": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        1426,
        1475
      ],
      "op": "DUP2",
      "path": "54"
    },
    "739": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        1449,
        1470
      ],
      "op": "DUP6",
      "path": "54"
    },
    "740": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        1426,
        1436
      ],
      "op": "DUP8",
      "path": "54"
    },
    "741": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        1426,
        1475
      ],
      "op": "GAS",
      "path": "54"
    },
    "742": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        1426,
        1475
      ],
      "op": "CALL",
      "path": "54"
    },
    "743": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        1426,
        1475
      ],
      "op": "SWAP3",
      "path": "54"
    },
    "744": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        1426,
        1475
      ],
      "op": "POP",
      "path": "54"
    },
    "745": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        1426,
        1475
      ],
      "op": "POP",
      "path": "54"
    },
    "746": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        1426,
        1475
      ],
      "op": "POP",
      "path": "54"
    },
    "747": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        1426,
        1475
      ],
      "op": "RETURNDATASIZE",
      "path": "54"
    },
    "748": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        1426,
        1475
      ],
      "op": "DUP1",
      "path": "54"
    },
    "749": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        1426,
        1475
      ],
      "op": "PUSH1",
      "path": "54",
      "value": "0x0"
    },
    "751": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        1426,
        1475
      ],
      "op": "DUP2",
      "path": "54"
    },
    "752": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        1426,
        1475
      ],
      "op": "EQ",
      "path": "54"
    },
    "753": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        1426,
        1475
      ],
      "op": "PUSH2",
      "path": "54",
      "value": "0x316"
    },
    "756": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        1426,
        1475
      ],
      "op": "JUMPI",
      "path": "54"
    },
    "757": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        1426,
        1475
      ],
      "op": "PUSH1",
      "path": "54",
      "value": "0x40"
    },
    "759": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        1426,
        1475
      ],
      "op": "MLOAD",
      "path": "54"
    },
    "760": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        1426,
        1475
      ],
      "op": "SWAP2",
      "path": "54"
    },
    "761": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        1426,
        1475
      ],
      "op": "POP",
      "path": "54"
    },
    "762": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        1426,
        1475
      ],
      "op": "PUSH1",
      "path": "54",
      "value": "0x1F"
    },
    "764": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        1426,
        1475
      ],
      "op": "NOT",
      "path": "54"
    },
    "765": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        1426,
        1475
      ],
      "op": "PUSH1",
      "path": "54",
      "value": "0x3F"
    },
    "767": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        1426,
        1475
      ],
      "op": "RETURNDATASIZE",
      "path": "54"
    },
    "768": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        1426,
        1475
      ],
      "op": "ADD",
      "path": "54"
    },
    "769": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        1426,
        1475
      ],
      "op": "AND",
      "path": "54"
    },
    "770": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        1426,
        1475
      ],
      "op": "DUP3",
      "path": "54"
    },
    "771": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        1426,
        1475
      ],
      "op": "ADD",
      "path": "54"
    },
    "772": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        1426,
        1475
      ],
      "op": "PUSH1",
      "path": "54",
      "value": "0x40"
    },
    "774": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        1426,
        1475
      ],
      "op": "MSTORE",
      "path": "54"
    },
    "775": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        1426,
        1475
      ],
      "op": "RETURNDATASIZE",
      "path": "54"
    },
    "776": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        1426,
        1475
      ],
      "op": "DUP3",
      "path": "54"
    },
    "777": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        1426,
        1475
      ],
      "op": "MSTORE",
      "path": "54"
    },
    "778": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        1426,
        1475
      ],
      "op": "RETURNDATASIZE",
      "path": "54"
    },
    "779": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        1426,
        1475
      ],
      "op": "PUSH1",
      "path": "54",
      "value": "0x0"
    },
    "781": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        1426,
        1475
      ],
      "op": "PUSH1",
      "path": "54",
      "value": "0x20"
    },
    "783": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        1426,
        1475
      ],
      "op": "DUP5",
      "path": "54"
    },
    "784": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        1426,
        1475
      ],
      "op": "ADD",
      "path": "54"
    },
    "785": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        1426,
        1475
      ],
      "op": "RETURNDATACOPY",
      "path": "54"
    },
    "786": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        1426,
        1475
      ],
      "op": "PUSH2",
      "path": "54",
      "value": "0x31B"
    },
    "789": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        1426,
        1475
      ],
      "op": "JUMP",
      "path": "54"
    },
    "790": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        1426,
        1475
      ],
      "op": "JUMPDEST",
      "path": "54"
    },
    "791": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        1426,
        1475
      ],
      "op": "PUSH1",
      "path": "54",
      "value": "0x60"
    },
    "793": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        1426,
        1475
      ],
      "op": "SWAP2",
      "path": "54"
    },
    "794": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        1426,
        1475
      ],
      "op": "POP",
      "path": "54"
    },
    "795": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        1426,
        1475
      ],
      "op": "JUMPDEST",
      "path": "54"
    },
    "796": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        1426,
        1475
      ],
      "op": "POP",
      "path": "54"
    },
    "797": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        1410,
        1475
      ],
      "op": "POP",
      "path": "54"
    },
    "798": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        1410,
        1475
      ],
      "op": "SWAP1",
      "path": "54"
    },
    "799": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        1410,
        1475
      ],
      "op": "POP",
      "path": "54"
    },
    "800": {
      "branch": 21,
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        1491,
        1495
      ],
      "op": "DUP1",
      "path": "54",
      "statement": 10
    },
    "801": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        1483,
        1518
      ],
      "op": "PUSH2",
      "path": "54",
      "value": "0x361"
    },
    "804": {
      "branch": 21,
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        1483,
        1518
      ],
      "op": "JUMPI",
      "path": "54"
    },
    "805": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        1483,
        1518
      ],
      "op": "PUSH1",
      "path": "54",
      "value": "0x40"
    },
    "807": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        1483,
        1518
      ],
      "op": "MLOAD",
      "path": "54"
    },
    "808": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "812": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "814": {
      "op": "SHL"
    },
    "815": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        1483,
        1518
      ],
      "op": "DUP2",
      "path": "54"
    },
    "816": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        1483,
        1518
      ],
      "op": "MSTORE",
      "path": "54"
    },
    "817": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "819": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        1483,
        1518
      ],
      "op": "PUSH1",
      "path": "54",
      "value": "0x4"
    },
    "821": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        1483,
        1518
      ],
      "op": "DUP3",
      "path": "54"
    },
    "822": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        1483,
        1518
      ],
      "op": "ADD",
      "path": "54"
    },
    "823": {
      "op": "MSTORE"
    },
    "824": {
      "op": "PUSH1",
      "value": "0x12"
    },
    "826": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "828": {
      "op": "DUP3"
    },
    "829": {
      "op": "ADD"
    },
    "830": {
      "op": "MSTORE"
    },
    "831": {
      "op": "PUSH18",
      "value": "0x8CC2D2D8CAC840E8DE40E6CADCC8408AA89"
    },
    "850": {
      "op": "PUSH1",
      "value": "0x73"
    },
    "852": {
      "op": "SHL"
    },
    "853": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "855": {
      "op": "DUP3"
    },
    "856": {
      "op": "ADD"
    },
    "857": {
      "op": "MSTORE"
    },
    "858": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "860": {
      "op": "ADD"
    },
    "861": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        1483,
        1518
      ],
      "op": "PUSH2",
      "path": "54",
      "value": "0x1C1"
    },
    "864": {
      "op": "JUMP"
    },
    "865": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        1483,
        1518
      ],
      "op": "JUMPDEST",
      "path": "54"
    },
    "866": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        1378,
        1525
      ],
      "op": "POP",
      "path": "54"
    },
    "867": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        1365,
        1525
      ],
      "op": "JUMPDEST",
      "path": "54"
    },
    "868": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        778,
        1529
      ],
      "op": "POP",
      "path": "54"
    },
    "869": {
      "fn": "CrypticRaffle.guessNumbers",
      "offset": [
        712,
        1529
      ],
      "op": "POP",
      "path": "54"
    },
    "870": {
      "fn": "CrypticRaffle.guessNumbers",
      "jump": "o",
      "offset": [
        712,
        1529
      ],
      "op": "JUMP",
      "path": "54"
    },
    "871": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        2081,
        2279
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "872": {
      "offset": [
        1094,
        1107
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x36F"
    },
    "875": {
      "offset": [
        1094,
        1105
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x3E0"
    },
    "878": {
      "jump": "i",
      "offset": [
        1094,
        1107
      ],
      "op": "JUMP",
      "path": "0"
    },
    "879": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1094,
        1107
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "880": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "882": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "884": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "886": {
      "op": "SHL"
    },
    "887": {
      "op": "SUB"
    },
    "888": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        2169,
        2191
      ],
      "op": "DUP2",
      "path": "0",
      "statement": 11
    },
    "889": {
      "branch": 22,
      "fn": "Ownable.transferOwnership",
      "offset": [
        2169,
        2191
      ],
      "op": "AND",
      "path": "0"
    },
    "890": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        2161,
        2234
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x3D4"
    },
    "893": {
      "branch": 22,
      "fn": "Ownable.transferOwnership",
      "offset": [
        2161,
        2234
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "894": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        2161,
        2234
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "896": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        2161,
        2234
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "897": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "901": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "903": {
      "op": "SHL"
    },
    "904": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        2161,
        2234
      ],
      "op": "DUP2",
      "path": "0"
    },
    "905": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        2161,
        2234
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "906": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "908": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        2161,
        2234
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "910": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        2161,
        2234
      ],
      "op": "DUP3",
      "path": "0"
    },
    "911": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        2161,
        2234
      ],
      "op": "ADD",
      "path": "0"
    },
    "912": {
      "op": "MSTORE"
    },
    "913": {
      "op": "PUSH1",
      "value": "0x26"
    },
    "915": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "917": {
      "op": "DUP3"
    },
    "918": {
      "op": "ADD"
    },
    "919": {
      "op": "MSTORE"
    },
    "920": {
      "op": "PUSH32",
      "value": "0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061"
    },
    "953": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "955": {
      "op": "DUP3"
    },
    "956": {
      "op": "ADD"
    },
    "957": {
      "op": "MSTORE"
    },
    "958": {
      "op": "PUSH6",
      "value": "0x646472657373"
    },
    "965": {
      "op": "PUSH1",
      "value": "0xD0"
    },
    "967": {
      "op": "SHL"
    },
    "968": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "970": {
      "op": "DUP3"
    },
    "971": {
      "op": "ADD"
    },
    "972": {
      "op": "MSTORE"
    },
    "973": {
      "op": "PUSH1",
      "value": "0x84"
    },
    "975": {
      "op": "ADD"
    },
    "976": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        2161,
        2234
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1C1"
    },
    "979": {
      "op": "JUMP"
    },
    "980": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        2161,
        2234
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "981": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        2244,
        2272
      ],
      "op": "PUSH2",
      "path": "0",
      "statement": 12,
      "value": "0x3DD"
    },
    "984": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        2263,
        2271
      ],
      "op": "DUP2",
      "path": "0"
    },
    "985": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        2244,
        2262
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x43A"
    },
    "988": {
      "fn": "Ownable.transferOwnership",
      "jump": "i",
      "offset": [
        2244,
        2272
      ],
      "op": "JUMP",
      "path": "0"
    },
    "989": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        2244,
        2272
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "990": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        2081,
        2279
      ],
      "op": "POP",
      "path": "0"
    },
    "991": {
      "fn": "Ownable.transferOwnership",
      "jump": "o",
      "offset": [
        2081,
        2279
      ],
      "op": "JUMP",
      "path": "0"
    },
    "992": {
      "fn": "Ownable._checkOwner",
      "offset": [
        1359,
        1489
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "993": {
      "fn": "Ownable.owner",
      "offset": [
        1247,
        1254
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "995": {
      "fn": "Ownable.owner",
      "offset": [
        1273,
        1279
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "996": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "998": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1000": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1002": {
      "op": "SHL"
    },
    "1003": {
      "op": "SUB"
    },
    "1004": {
      "fn": "Ownable.owner",
      "offset": [
        1273,
        1279
      ],
      "op": "AND",
      "path": "0"
    },
    "1005": {
      "fn": "Context._msgSender",
      "offset": [
        719,
        729
      ],
      "op": "CALLER",
      "path": "13",
      "statement": 13
    },
    "1006": {
      "branch": 23,
      "fn": "Ownable._checkOwner",
      "offset": [
        1422,
        1445
      ],
      "op": "EQ",
      "path": "0",
      "statement": 14
    },
    "1007": {
      "fn": "Ownable._checkOwner",
      "offset": [
        1414,
        1482
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x17A"
    },
    "1010": {
      "branch": 23,
      "fn": "Ownable._checkOwner",
      "offset": [
        1414,
        1482
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "1011": {
      "fn": "Ownable._checkOwner",
      "offset": [
        1414,
        1482
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "1013": {
      "fn": "Ownable._checkOwner",
      "offset": [
        1414,
        1482
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "1014": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1018": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1020": {
      "op": "SHL"
    },
    "1021": {
      "fn": "Ownable._checkOwner",
      "offset": [
        1414,
        1482
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1022": {
      "fn": "Ownable._checkOwner",
      "offset": [
        1414,
        1482
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1023": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1025": {
      "fn": "Ownable._checkOwner",
      "offset": [
        1414,
        1482
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "1027": {
      "fn": "Ownable._checkOwner",
      "offset": [
        1414,
        1482
      ],
      "op": "DUP3",
      "path": "0"
    },
    "1028": {
      "fn": "Ownable._checkOwner",
      "offset": [
        1414,
        1482
      ],
      "op": "ADD",
      "path": "0"
    },
    "1029": {
      "op": "DUP2"
    },
    "1030": {
      "op": "SWAP1"
    },
    "1031": {
      "op": "MSTORE"
    },
    "1032": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "1034": {
      "op": "DUP3"
    },
    "1035": {
      "op": "ADD"
    },
    "1036": {
      "op": "MSTORE"
    },
    "1037": {
      "op": "PUSH32",
      "value": "0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572"
    },
    "1070": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "1072": {
      "op": "DUP3"
    },
    "1073": {
      "op": "ADD"
    },
    "1074": {
      "op": "MSTORE"
    },
    "1075": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "1077": {
      "op": "ADD"
    },
    "1078": {
      "fn": "Ownable._checkOwner",
      "offset": [
        1414,
        1482
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1C1"
    },
    "1081": {
      "op": "JUMP"
    },
    "1082": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2433,
        2620
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1083": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2506,
        2522
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "1085": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2525,
        2531
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1086": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2525,
        2531
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "1087": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1089": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1091": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1093": {
      "op": "SHL"
    },
    "1094": {
      "op": "SUB"
    },
    "1095": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2541,
        2558
      ],
      "op": "DUP4",
      "path": "0",
      "statement": 15
    },
    "1096": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2541,
        2558
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1097": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2541,
        2558
      ],
      "op": "AND",
      "path": "0"
    },
    "1098": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1100": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1102": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1104": {
      "op": "SHL"
    },
    "1105": {
      "op": "SUB"
    },
    "1106": {
      "op": "NOT"
    },
    "1107": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2541,
        2558
      ],
      "op": "DUP4",
      "path": "0"
    },
    "1108": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2541,
        2558
      ],
      "op": "AND",
      "path": "0"
    },
    "1109": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2541,
        2558
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1110": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2541,
        2558
      ],
      "op": "OR",
      "path": "0"
    },
    "1111": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2541,
        2558
      ],
      "op": "DUP5",
      "path": "0"
    },
    "1112": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2541,
        2558
      ],
      "op": "SSTORE",
      "path": "0"
    },
    "1113": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2573,
        2613
      ],
      "op": "PUSH1",
      "path": "0",
      "statement": 16,
      "value": "0x40"
    },
    "1115": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2573,
        2613
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "1116": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2525,
        2531
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1117": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2525,
        2531
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1118": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2525,
        2531
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "1119": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2525,
        2531
      ],
      "op": "AND",
      "path": "0"
    },
    "1120": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2525,
        2531
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "1121": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2525,
        2531
      ],
      "op": "DUP4",
      "path": "0"
    },
    "1122": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2525,
        2531
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1123": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2573,
        2613
      ],
      "op": "PUSH32",
      "path": "0",
      "value": "0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
    },
    "1156": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2573,
        2613
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1157": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2506,
        2522
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1158": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2573,
        2613
      ],
      "op": "LOG3",
      "path": "0"
    },
    "1159": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2496,
        2620
      ],
      "op": "POP",
      "path": "0"
    },
    "1160": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2433,
        2620
      ],
      "op": "POP",
      "path": "0"
    },
    "1161": {
      "fn": "Ownable._transferOwnership",
      "jump": "o",
      "offset": [
        2433,
        2620
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1162": {
      "op": "JUMPDEST"
    },
    "1163": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1165": {
      "op": "DUP4"
    },
    "1166": {
      "op": "ADD"
    },
    "1167": {
      "op": "SWAP2"
    },
    "1168": {
      "op": "DUP4"
    },
    "1169": {
      "op": "SWAP1"
    },
    "1170": {
      "op": "DUP3"
    },
    "1171": {
      "op": "ISZERO"
    },
    "1172": {
      "op": "PUSH2",
      "value": "0x510"
    },
    "1175": {
      "op": "JUMPI"
    },
    "1176": {
      "op": "SWAP2"
    },
    "1177": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1179": {
      "op": "MUL"
    },
    "1180": {
      "op": "DUP3"
    },
    "1181": {
      "op": "ADD"
    },
    "1182": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1184": {
      "op": "JUMPDEST"
    },
    "1185": {
      "op": "DUP4"
    },
    "1186": {
      "op": "DUP3"
    },
    "1187": {
      "op": "GT"
    },
    "1188": {
      "op": "ISZERO"
    },
    "1189": {
      "op": "PUSH2",
      "value": "0x4E1"
    },
    "1192": {
      "op": "JUMPI"
    },
    "1193": {
      "op": "DUP4"
    },
    "1194": {
      "op": "CALLDATALOAD"
    },
    "1195": {
      "op": "PUSH1",
      "value": "0xFF"
    },
    "1197": {
      "op": "AND"
    },
    "1198": {
      "op": "DUP4"
    },
    "1199": {
      "op": "DUP3"
    },
    "1200": {
      "op": "PUSH2",
      "value": "0x100"
    },
    "1203": {
      "op": "EXP"
    },
    "1204": {
      "op": "DUP2"
    },
    "1205": {
      "op": "SLOAD"
    },
    "1206": {
      "op": "DUP2"
    },
    "1207": {
      "op": "PUSH1",
      "value": "0xFF"
    },
    "1209": {
      "op": "MUL"
    },
    "1210": {
      "op": "NOT"
    },
    "1211": {
      "op": "AND"
    },
    "1212": {
      "op": "SWAP1"
    },
    "1213": {
      "op": "DUP4"
    },
    "1214": {
      "op": "PUSH1",
      "value": "0xFF"
    },
    "1216": {
      "op": "AND"
    },
    "1217": {
      "op": "MUL"
    },
    "1218": {
      "op": "OR"
    },
    "1219": {
      "op": "SWAP1"
    },
    "1220": {
      "op": "SSTORE"
    },
    "1221": {
      "op": "POP"
    },
    "1222": {
      "op": "SWAP3"
    },
    "1223": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1225": {
      "op": "ADD"
    },
    "1226": {
      "op": "SWAP3"
    },
    "1227": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1229": {
      "op": "ADD"
    },
    "1230": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1232": {
      "op": "DUP2"
    },
    "1233": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1235": {
      "op": "ADD"
    },
    "1236": {
      "op": "DIV"
    },
    "1237": {
      "op": "SWAP3"
    },
    "1238": {
      "op": "DUP4"
    },
    "1239": {
      "op": "ADD"
    },
    "1240": {
      "op": "SWAP3"
    },
    "1241": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1243": {
      "op": "SUB"
    },
    "1244": {
      "op": "MUL"
    },
    "1245": {
      "op": "PUSH2",
      "value": "0x4A0"
    },
    "1248": {
      "op": "JUMP"
    },
    "1249": {
      "op": "JUMPDEST"
    },
    "1250": {
      "op": "DUP1"
    },
    "1251": {
      "op": "ISZERO"
    },
    "1252": {
      "op": "PUSH2",
      "value": "0x50E"
    },
    "1255": {
      "op": "JUMPI"
    },
    "1256": {
      "op": "DUP3"
    },
    "1257": {
      "op": "DUP2"
    },
    "1258": {
      "op": "PUSH2",
      "value": "0x100"
    },
    "1261": {
      "op": "EXP"
    },
    "1262": {
      "op": "DUP2"
    },
    "1263": {
      "op": "SLOAD"
    },
    "1264": {
      "op": "SWAP1"
    },
    "1265": {
      "op": "PUSH1",
      "value": "0xFF"
    },
    "1267": {
      "op": "MUL"
    },
    "1268": {
      "op": "NOT"
    },
    "1269": {
      "op": "AND"
    },
    "1270": {
      "op": "SWAP1"
    },
    "1271": {
      "op": "SSTORE"
    },
    "1272": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1274": {
      "op": "ADD"
    },
    "1275": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1277": {
      "op": "DUP2"
    },
    "1278": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1280": {
      "op": "ADD"
    },
    "1281": {
      "op": "DIV"
    },
    "1282": {
      "op": "SWAP3"
    },
    "1283": {
      "op": "DUP4"
    },
    "1284": {
      "op": "ADD"
    },
    "1285": {
      "op": "SWAP3"
    },
    "1286": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1288": {
      "op": "SUB"
    },
    "1289": {
      "op": "MUL"
    },
    "1290": {
      "op": "PUSH2",
      "value": "0x4E1"
    },
    "1293": {
      "op": "JUMP"
    },
    "1294": {
      "op": "JUMPDEST"
    },
    "1295": {
      "op": "POP"
    },
    "1296": {
      "op": "JUMPDEST"
    },
    "1297": {
      "op": "POP"
    },
    "1298": {
      "op": "PUSH2",
      "value": "0x51C"
    },
    "1301": {
      "op": "SWAP3"
    },
    "1302": {
      "op": "SWAP2"
    },
    "1303": {
      "op": "POP"
    },
    "1304": {
      "op": "PUSH2",
      "value": "0x520"
    },
    "1307": {
      "jump": "i",
      "op": "JUMP"
    },
    "1308": {
      "op": "JUMPDEST"
    },
    "1309": {
      "op": "POP"
    },
    "1310": {
      "op": "SWAP1"
    },
    "1311": {
      "jump": "o",
      "op": "JUMP"
    },
    "1312": {
      "op": "JUMPDEST"
    },
    "1313": {
      "op": "JUMPDEST"
    },
    "1314": {
      "op": "DUP1"
    },
    "1315": {
      "op": "DUP3"
    },
    "1316": {
      "op": "GT"
    },
    "1317": {
      "op": "ISZERO"
    },
    "1318": {
      "op": "PUSH2",
      "value": "0x51C"
    },
    "1321": {
      "op": "JUMPI"
    },
    "1322": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1324": {
      "op": "DUP2"
    },
    "1325": {
      "op": "SSTORE"
    },
    "1326": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1328": {
      "op": "ADD"
    },
    "1329": {
      "op": "PUSH2",
      "value": "0x521"
    },
    "1332": {
      "op": "JUMP"
    },
    "1333": {
      "op": "JUMPDEST"
    },
    "1334": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1336": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "1338": {
      "op": "DUP3"
    },
    "1339": {
      "op": "DUP5"
    },
    "1340": {
      "op": "SUB"
    },
    "1341": {
      "op": "SLT"
    },
    "1342": {
      "op": "ISZERO"
    },
    "1343": {
      "op": "PUSH2",
      "value": "0x547"
    },
    "1346": {
      "op": "JUMPI"
    },
    "1347": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1349": {
      "op": "DUP1"
    },
    "1350": {
      "op": "REVERT"
    },
    "1351": {
      "op": "JUMPDEST"
    },
    "1352": {
      "op": "DUP3"
    },
    "1353": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "1355": {
      "op": "DUP4"
    },
    "1356": {
      "op": "ADD"
    },
    "1357": {
      "op": "GT"
    },
    "1358": {
      "op": "ISZERO"
    },
    "1359": {
      "op": "PUSH2",
      "value": "0x557"
    },
    "1362": {
      "op": "JUMPI"
    },
    "1363": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1365": {
      "op": "DUP1"
    },
    "1366": {
      "op": "REVERT"
    },
    "1367": {
      "op": "JUMPDEST"
    },
    "1368": {
      "op": "POP"
    },
    "1369": {
      "op": "SWAP2"
    },
    "1370": {
      "op": "SWAP1"
    },
    "1371": {
      "op": "POP"
    },
    "1372": {
      "jump": "o",
      "op": "JUMP"
    },
    "1373": {
      "op": "JUMPDEST"
    },
    "1374": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1376": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1378": {
      "op": "DUP3"
    },
    "1379": {
      "op": "DUP5"
    },
    "1380": {
      "op": "SUB"
    },
    "1381": {
      "op": "SLT"
    },
    "1382": {
      "op": "ISZERO"
    },
    "1383": {
      "op": "PUSH2",
      "value": "0x56F"
    },
    "1386": {
      "op": "JUMPI"
    },
    "1387": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1389": {
      "op": "DUP1"
    },
    "1390": {
      "op": "REVERT"
    },
    "1391": {
      "op": "JUMPDEST"
    },
    "1392": {
      "op": "DUP2"
    },
    "1393": {
      "op": "CALLDATALOAD"
    },
    "1394": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1396": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1398": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1400": {
      "op": "SHL"
    },
    "1401": {
      "op": "SUB"
    },
    "1402": {
      "op": "DUP2"
    },
    "1403": {
      "op": "AND"
    },
    "1404": {
      "op": "DUP2"
    },
    "1405": {
      "op": "EQ"
    },
    "1406": {
      "op": "PUSH2",
      "value": "0x586"
    },
    "1409": {
      "op": "JUMPI"
    },
    "1410": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1412": {
      "op": "DUP1"
    },
    "1413": {
      "op": "REVERT"
    },
    "1414": {
      "op": "JUMPDEST"
    },
    "1415": {
      "op": "SWAP4"
    },
    "1416": {
      "op": "SWAP3"
    },
    "1417": {
      "op": "POP"
    },
    "1418": {
      "op": "POP"
    },
    "1419": {
      "op": "POP"
    },
    "1420": {
      "jump": "o",
      "op": "JUMP"
    },
    "1421": {
      "op": "JUMPDEST"
    },
    "1422": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "1427": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "1429": {
      "op": "SHL"
    },
    "1430": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1432": {
      "op": "MSTORE"
    },
    "1433": {
      "op": "PUSH1",
      "value": "0x11"
    },
    "1435": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "1437": {
      "op": "MSTORE"
    },
    "1438": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "1440": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1442": {
      "op": "REVERT"
    },
    "1443": {
      "op": "JUMPDEST"
    },
    "1444": {
      "op": "DUP1"
    },
    "1445": {
      "op": "DUP3"
    },
    "1446": {
      "op": "ADD"
    },
    "1447": {
      "op": "DUP1"
    },
    "1448": {
      "op": "DUP3"
    },
    "1449": {
      "op": "GT"
    },
    "1450": {
      "op": "ISZERO"
    },
    "1451": {
      "op": "PUSH2",
      "value": "0x5B6"
    },
    "1454": {
      "op": "JUMPI"
    },
    "1455": {
      "op": "PUSH2",
      "value": "0x5B6"
    },
    "1458": {
      "op": "PUSH2",
      "value": "0x58D"
    },
    "1461": {
      "jump": "i",
      "op": "JUMP"
    },
    "1462": {
      "op": "JUMPDEST"
    },
    "1463": {
      "op": "SWAP3"
    },
    "1464": {
      "op": "SWAP2"
    },
    "1465": {
      "op": "POP"
    },
    "1466": {
      "op": "POP"
    },
    "1467": {
      "jump": "o",
      "op": "JUMP"
    },
    "1468": {
      "op": "JUMPDEST"
    },
    "1469": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "1474": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "1476": {
      "op": "SHL"
    },
    "1477": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1479": {
      "op": "MSTORE"
    },
    "1480": {
      "op": "PUSH1",
      "value": "0x32"
    },
    "1482": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "1484": {
      "op": "MSTORE"
    },
    "1485": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "1487": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1489": {
      "op": "REVERT"
    },
    "1490": {
      "op": "JUMPDEST"
    },
    "1491": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1493": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1495": {
      "op": "DUP3"
    },
    "1496": {
      "op": "DUP5"
    },
    "1497": {
      "op": "SUB"
    },
    "1498": {
      "op": "SLT"
    },
    "1499": {
      "op": "ISZERO"
    },
    "1500": {
      "op": "PUSH2",
      "value": "0x5E4"
    },
    "1503": {
      "op": "JUMPI"
    },
    "1504": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1506": {
      "op": "DUP1"
    },
    "1507": {
      "op": "REVERT"
    },
    "1508": {
      "op": "JUMPDEST"
    },
    "1509": {
      "op": "DUP2"
    },
    "1510": {
      "op": "CALLDATALOAD"
    },
    "1511": {
      "op": "PUSH1",
      "value": "0xFF"
    },
    "1513": {
      "op": "DUP2"
    },
    "1514": {
      "op": "AND"
    },
    "1515": {
      "op": "DUP2"
    },
    "1516": {
      "op": "EQ"
    },
    "1517": {
      "op": "PUSH2",
      "value": "0x586"
    },
    "1520": {
      "op": "JUMPI"
    },
    "1521": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1523": {
      "op": "DUP1"
    },
    "1524": {
      "op": "REVERT"
    },
    "1525": {
      "op": "JUMPDEST"
    },
    "1526": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1528": {
      "op": "PUSH1",
      "value": "0xFF"
    },
    "1530": {
      "op": "DUP3"
    },
    "1531": {
      "op": "AND"
    },
    "1532": {
      "op": "PUSH1",
      "value": "0xFF"
    },
    "1534": {
      "op": "DUP2"
    },
    "1535": {
      "op": "SUB"
    },
    "1536": {
      "op": "PUSH2",
      "value": "0x60B"
    },
    "1539": {
      "op": "JUMPI"
    },
    "1540": {
      "op": "PUSH2",
      "value": "0x60B"
    },
    "1543": {
      "op": "PUSH2",
      "value": "0x58D"
    },
    "1546": {
      "jump": "i",
      "op": "JUMP"
    },
    "1547": {
      "op": "JUMPDEST"
    },
    "1548": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1550": {
      "op": "ADD"
    },
    "1551": {
      "op": "SWAP3"
    },
    "1552": {
      "op": "SWAP2"
    },
    "1553": {
      "op": "POP"
    },
    "1554": {
      "op": "POP"
    },
    "1555": {
      "jump": "o",
      "op": "JUMP"
    }
  },
  "sha1": "08dc5f4fbdf25fadeda47a6e0cadf8e371017c6b",
  "source": "// SCH Course Copyright Policy (C): DO-NOT-SHARE-WITH-ANYONE\n// https://smartcontractshacking.com/#copyright-policy\npragma solidity ^0.8.13;\n\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract CrypticRaffle is Ownable, ReentrancyGuard {\n\n  uint256 constant public PARTICIPIATION_PRICE = 0.01 ether;\n  bool private isActive = false;\n  uint256 raffleId;\n  \n  // 3 Numbers between 0-255\n  // Example: [53, 0, 123]\n  mapping(uint256 => uint8[3]) private raffles;\n\n  constructor() payable {}\n\n  function newRaffle(uint8[3] calldata numbers) external onlyOwner {\n    raffleId += 1;\n    raffles[raffleId] = numbers;\n    isActive = true;\n  }\n\n  function guessNumbers(uint8[3] calldata numbers) external payable {\n\n    require(isActive, \"Raffle is not active\");\n    require(numbers.length == 3, \"you should guess 3 numbers\");\n    require(msg.value == PARTICIPIATION_PRICE, \"you should pay 0.1 eth to participate\");\n\n    bool succeded = true;\n    \n    // Iterate guessed numbers, use should guess all 3 numbers in the right order\n    for(uint8 i=0; i < 3; i++) {\n\n      // If user was wrong with one of the numbers, he lost\n      if(numbers[i] != raffles[raffleId][i]) {\n        succeded = false;\n      }\n    }\n\n    // Send bounty and close the raffle if the user won (until next raffle is live)\n    if(succeded) {\n      isActive = false;\n      (bool sent, ) = msg.sender.call{value: address(this).balance}(\"\");\n      require(sent, \"Failed to send ETH\");\n    }\n  }\n\n}",
  "sourceMap": "259:1273:54:-:0;;;376:29;;;-1:-1:-1;;376:29:54;;;936:32:0;719:10:13;936:18:0;:32::i;:::-;1716:1:1;1821:22;;259:1273:54;;2433:187:0;2506:16;2525:6;;-1:-1:-1;;;;;2541:17:0;;;-1:-1:-1;;;;;;2541:17:0;;;;;;2573:40;;2525:6;;;;;;;2573:40;;2506:16;2573:40;2496:124;2433:187;:::o;259:1273:54:-;;;;;;;",
  "sourcePath": "contracts/sensitive-on-chain-data-3/CrypticRaffle.sol",
  "type": "contract"
}