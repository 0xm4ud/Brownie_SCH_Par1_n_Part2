{
  "abi": [
    {
      "inputs": [],
      "stateMutability": "payable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "solution",
          "type": "string"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "complicateFunction",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "funnyFunction",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "allSourcePaths": {
    "37": "contracts/frontrunning-1/FindMe.sol"
  },
  "ast": {
    "absolutePath": "contracts/frontrunning-1/FindMe.sol",
    "exportedSymbols": {
      "FindMe": [
        1891
      ]
    },
    "id": 1892,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1792,
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".13"
        ],
        "nodeType": "PragmaDirective",
        "src": "116:24:37"
      },
      {
        "abstract": false,
        "baseContracts": [],
        "canonicalName": "FindMe",
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": {
          "id": 1793,
          "nodeType": "StructuredDocumentation",
          "src": "142:82:37",
          "text": " @title FindMe\n @author JohnnyTime (https://smartcontractshacking.com)"
        },
        "fullyImplemented": true,
        "id": 1891,
        "linearizedBaseContracts": [
          1891
        ],
        "name": "FindMe",
        "nameLocation": "234:6:37",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": true,
            "functionSelector": "09bd5a60",
            "id": 1796,
            "mutability": "constant",
            "name": "hash",
            "nameLocation": "271:4:37",
            "nodeType": "VariableDeclaration",
            "scope": 1891,
            "src": "247:105:37",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bytes32",
              "typeString": "bytes32"
            },
            "typeName": {
              "id": 1794,
              "name": "bytes32",
              "nodeType": "ElementaryTypeName",
              "src": "247:7:37",
              "typeDescriptions": {
                "typeIdentifier": "t_bytes32",
                "typeString": "bytes32"
              }
            },
            "value": {
              "hexValue": "307835363463636166373539346436366231656161656132346665303166303538356266353265653730383532616634656163306363346230343731316364306532",
              "id": 1795,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "number",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "286:66:37",
              "typeDescriptions": {
                "typeIdentifier": "t_rational_39034586176357580034959233824869093304544434630684953075134198080579749859554_by_1",
                "typeString": "int_const 3903...(69 digits omitted)...9554"
              },
              "value": "0x564ccaf7594d66b1eaaea24fe01f0585bf52ee70852af4eac0cc4b04711cd0e2"
            },
            "visibility": "public"
          },
          {
            "body": {
              "id": 1799,
              "nodeType": "Block",
              "src": "381:2:37",
              "statements": []
            },
            "id": 1800,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nameLocation": "-1:-1:-1",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1797,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "370:2:37"
            },
            "returnParameters": {
              "id": 1798,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "381:0:37"
            },
            "scope": 1891,
            "src": "359:24:37",
            "stateMutability": "payable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 1843,
              "nodeType": "Block",
              "src": "435:309:37",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "id": 1813,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 1806,
                          "name": "hash",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1796,
                          "src": "466:4:37",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "id": 1810,
                                  "name": "solution",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1802,
                                  "src": "501:8:37",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_string_memory_ptr",
                                    "typeString": "string memory"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_string_memory_ptr",
                                    "typeString": "string memory"
                                  }
                                ],
                                "expression": {
                                  "id": 1808,
                                  "name": "abi",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": -1,
                                  "src": "484:3:37",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_abi",
                                    "typeString": "abi"
                                  }
                                },
                                "id": 1809,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "memberLocation": "488:12:37",
                                "memberName": "encodePacked",
                                "nodeType": "MemberAccess",
                                "src": "484:16:37",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
                                  "typeString": "function () pure returns (bytes memory)"
                                }
                              },
                              "id": 1811,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "484:26:37",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            ],
                            "id": 1807,
                            "name": "keccak256",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -8,
                            "src": "474:9:37",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                              "typeString": "function (bytes memory) pure returns (bytes32)"
                            }
                          },
                          "id": 1812,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "474:37:37",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "src": "466:45:37",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "496e636f727265637420726573706f6e7365",
                        "id": 1814,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "525:20:37",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_260cb6002690b3bb44ccd2d90cd8ce9c9964ff0b54d7c958f192cd079c474b6e",
                          "typeString": "literal_string \"Incorrect response\""
                        },
                        "value": "Incorrect response"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_260cb6002690b3bb44ccd2d90cd8ce9c9964ff0b54d7c958f192cd079c474b6e",
                          "typeString": "literal_string \"Incorrect response\""
                        }
                      ],
                      "id": 1805,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "445:7:37",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 1815,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "445:110:37",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1816,
                  "nodeType": "ExpressionStatement",
                  "src": "445:110:37"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 1824,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "expression": {
                            "arguments": [
                              {
                                "id": 1820,
                                "name": "this",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -28,
                                "src": "581:4:37",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_contract$_FindMe_$1891",
                                  "typeString": "contract FindMe"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_contract$_FindMe_$1891",
                                  "typeString": "contract FindMe"
                                }
                              ],
                              "id": 1819,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "573:7:37",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_address_$",
                                "typeString": "type(address)"
                              },
                              "typeName": {
                                "id": 1818,
                                "name": "address",
                                "nodeType": "ElementaryTypeName",
                                "src": "573:7:37",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 1821,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "573:13:37",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "id": 1822,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "587:7:37",
                          "memberName": "balance",
                          "nodeType": "MemberAccess",
                          "src": "573:21:37",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": ">=",
                        "rightExpression": {
                          "hexValue": "3130",
                          "id": 1823,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "598:8:37",
                          "subdenomination": "ether",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_10000000000000000000_by_1",
                            "typeString": "int_const 10000000000000000000"
                          },
                          "value": "10"
                        },
                        "src": "573:33:37",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "4e6f7420656e6f756768206574686572",
                        "id": 1825,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "608:18:37",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_16d59be81b7a8951797c3c168116b0901a08a2d4ed98e9b44f53b2431963ec10",
                          "typeString": "literal_string \"Not enough ether\""
                        },
                        "value": "Not enough ether"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_16d59be81b7a8951797c3c168116b0901a08a2d4ed98e9b44f53b2431963ec10",
                          "typeString": "literal_string \"Not enough ether\""
                        }
                      ],
                      "id": 1817,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "565:7:37",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 1826,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "565:62:37",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1827,
                  "nodeType": "ExpressionStatement",
                  "src": "565:62:37"
                },
                {
                  "assignments": [
                    1829,
                    null
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 1829,
                      "mutability": "mutable",
                      "name": "sent",
                      "nameLocation": "643:4:37",
                      "nodeType": "VariableDeclaration",
                      "scope": 1843,
                      "src": "638:9:37",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "typeName": {
                        "id": 1828,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "638:4:37",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "visibility": "internal"
                    },
                    null
                  ],
                  "id": 1837,
                  "initialValue": {
                    "arguments": [
                      {
                        "hexValue": "",
                        "id": 1835,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "686:2:37",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                          "typeString": "literal_string \"\""
                        },
                        "value": ""
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                          "typeString": "literal_string \"\""
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                            "typeString": "literal_string \"\""
                          }
                        ],
                        "expression": {
                          "expression": {
                            "id": 1830,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "653:3:37",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 1831,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "657:6:37",
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "src": "653:10:37",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "id": 1832,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberLocation": "664:4:37",
                        "memberName": "call",
                        "nodeType": "MemberAccess",
                        "src": "653:15:37",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
                          "typeString": "function (bytes memory) payable returns (bool,bytes memory)"
                        }
                      },
                      "id": 1834,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "names": [
                        "value"
                      ],
                      "nodeType": "FunctionCallOptions",
                      "options": [
                        {
                          "hexValue": "3130",
                          "id": 1833,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "676:8:37",
                          "subdenomination": "ether",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_10000000000000000000_by_1",
                            "typeString": "int_const 10000000000000000000"
                          },
                          "value": "10"
                        }
                      ],
                      "src": "653:32:37",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
                        "typeString": "function (bytes memory) payable returns (bool,bytes memory)"
                      }
                    },
                    "id": 1836,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "653:36:37",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
                      "typeString": "tuple(bool,bytes memory)"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "637:52:37"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 1839,
                        "name": "sent",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1829,
                        "src": "708:4:37",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "4661696c656420746f2073656e64204574686572",
                        "id": 1840,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "714:22:37",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_445140255c9d889994129d349e64078d6f76b4b37ec896948f7e858f9b8a0dcb",
                          "typeString": "literal_string \"Failed to send Ether\""
                        },
                        "value": "Failed to send Ether"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_445140255c9d889994129d349e64078d6f76b4b37ec896948f7e858f9b8a0dcb",
                          "typeString": "literal_string \"Failed to send Ether\""
                        }
                      ],
                      "id": 1838,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "700:7:37",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 1841,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "700:37:37",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1842,
                  "nodeType": "ExpressionStatement",
                  "src": "700:37:37"
                }
              ]
            },
            "functionSelector": "f3fe12c9",
            "id": 1844,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "claim",
            "nameLocation": "398:5:37",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1803,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1802,
                  "mutability": "mutable",
                  "name": "solution",
                  "nameLocation": "418:8:37",
                  "nodeType": "VariableDeclaration",
                  "scope": 1844,
                  "src": "404:22:37",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 1801,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "404:6:37",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "403:24:37"
            },
            "returnParameters": {
              "id": 1804,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "435:0:37"
            },
            "scope": 1891,
            "src": "389:355:37",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 1851,
              "nodeType": "Block",
              "src": "811:121:37",
              "statements": [
                {
                  "expression": {
                    "hexValue": "4920616d20612066756e6e792066756e6374696f6e2c204920616d206e6f74207573656420666f7220616e797468696e672c204920616d206a757374206865726520746f206d616b6520796f75206c61756768",
                    "id": 1849,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "string",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "840:85:37",
                    "typeDescriptions": {
                      "typeIdentifier": "t_stringliteral_a62c102a6b9b4eb764c6c13abb28a87da46020ca86ce35b850c19ddf73d2ae64",
                      "typeString": "literal_string \"I am a funny function, I am not used for anything, I am just here to make you laugh\""
                    },
                    "value": "I am a funny function, I am not used for anything, I am just here to make you laugh"
                  },
                  "functionReturnParameters": 1848,
                  "id": 1850,
                  "nodeType": "Return",
                  "src": "821:104:37"
                }
              ]
            },
            "functionSelector": "e78e3000",
            "id": 1852,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "funnyFunction",
            "nameLocation": "759:13:37",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1845,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "772:2:37"
            },
            "returnParameters": {
              "id": 1848,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1847,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 1852,
                  "src": "796:13:37",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 1846,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "796:6:37",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "795:15:37"
            },
            "scope": 1891,
            "src": "750:182:37",
            "stateMutability": "pure",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 1877,
              "nodeType": "Block",
              "src": "1004:243:37",
              "statements": [
                {
                  "body": {
                    "id": 1873,
                    "nodeType": "Block",
                    "src": "1048:75:37",
                    "statements": [
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 1869,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 1867,
                            "name": "i",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1858,
                            "src": "1066:1:37",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "hexValue": "3530",
                            "id": 1868,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "1071:2:37",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_50_by_1",
                              "typeString": "int_const 50"
                            },
                            "value": "50"
                          },
                          "src": "1066:7:37",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 1872,
                        "nodeType": "IfStatement",
                        "src": "1062:51:37",
                        "trueBody": {
                          "id": 1871,
                          "nodeType": "Block",
                          "src": "1075:38:37",
                          "statements": [
                            {
                              "id": 1870,
                              "nodeType": "Break",
                              "src": "1093:5:37"
                            }
                          ]
                        }
                      }
                    ]
                  },
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 1863,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 1861,
                      "name": "i",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1858,
                      "src": "1034:1:37",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "<",
                    "rightExpression": {
                      "hexValue": "313030",
                      "id": 1862,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "1038:3:37",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_100_by_1",
                        "typeString": "int_const 100"
                      },
                      "value": "100"
                    },
                    "src": "1034:7:37",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 1874,
                  "initializationExpression": {
                    "assignments": [
                      1858
                    ],
                    "declarations": [
                      {
                        "constant": false,
                        "id": 1858,
                        "mutability": "mutable",
                        "name": "i",
                        "nameLocation": "1027:1:37",
                        "nodeType": "VariableDeclaration",
                        "scope": 1874,
                        "src": "1019:9:37",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1857,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "1019:7:37",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "id": 1860,
                    "initialValue": {
                      "hexValue": "30",
                      "id": 1859,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "1031:1:37",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "nodeType": "VariableDeclarationStatement",
                    "src": "1019:13:37"
                  },
                  "loopExpression": {
                    "expression": {
                      "id": 1865,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "UnaryOperation",
                      "operator": "++",
                      "prefix": false,
                      "src": "1043:3:37",
                      "subExpression": {
                        "id": 1864,
                        "name": "i",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1858,
                        "src": "1043:1:37",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 1866,
                    "nodeType": "ExpressionStatement",
                    "src": "1043:3:37"
                  },
                  "nodeType": "ForStatement",
                  "src": "1014:109:37"
                },
                {
                  "expression": {
                    "hexValue": "4920616d206120636f6d706c69636174652066756e6374696f6e2c204920616d206e6f74207573656420666f7220616e797468696e672c204920616d206a757374206865726520746f206d616b6520796f7520637279",
                    "id": 1875,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "string",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "1152:88:37",
                    "typeDescriptions": {
                      "typeIdentifier": "t_stringliteral_2fcc75c48dc06a535478017a01bfa24720569298228b645c57e22d7ba54c2a5c",
                      "typeString": "literal_string \"I am a complicate function, I am not used for anything, I am just here to make you cry\""
                    },
                    "value": "I am a complicate function, I am not used for anything, I am just here to make you cry"
                  },
                  "functionReturnParameters": 1856,
                  "id": 1876,
                  "nodeType": "Return",
                  "src": "1133:107:37"
                }
              ]
            },
            "functionSelector": "6f6b460a",
            "id": 1878,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "complicateFunction",
            "nameLocation": "947:18:37",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1853,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "965:2:37"
            },
            "returnParameters": {
              "id": 1856,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1855,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 1878,
                  "src": "989:13:37",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 1854,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "989:6:37",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "988:15:37"
            },
            "scope": 1891,
            "src": "938:309:37",
            "stateMutability": "pure",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 1889,
              "nodeType": "Block",
              "src": "1305:45:37",
              "statements": [
                {
                  "expression": {
                    "expression": {
                      "arguments": [
                        {
                          "id": 1885,
                          "name": "this",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -28,
                          "src": "1330:4:37",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_FindMe_$1891",
                            "typeString": "contract FindMe"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_contract$_FindMe_$1891",
                            "typeString": "contract FindMe"
                          }
                        ],
                        "id": 1884,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "nodeType": "ElementaryTypeNameExpression",
                        "src": "1322:7:37",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_address_$",
                          "typeString": "type(address)"
                        },
                        "typeName": {
                          "id": 1883,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "1322:7:37",
                          "typeDescriptions": {}
                        }
                      },
                      "id": 1886,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "typeConversion",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "1322:13:37",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "id": 1887,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "memberLocation": "1336:7:37",
                    "memberName": "balance",
                    "nodeType": "MemberAccess",
                    "src": "1322:21:37",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 1882,
                  "id": 1888,
                  "nodeType": "Return",
                  "src": "1315:28:37"
                }
              ]
            },
            "functionSelector": "12065fe0",
            "id": 1890,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getBalance",
            "nameLocation": "1262:10:37",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1879,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1272:2:37"
            },
            "returnParameters": {
              "id": 1882,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1881,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 1890,
                  "src": "1296:7:37",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1880,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1296:7:37",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1295:9:37"
            },
            "scope": 1891,
            "src": "1253:97:37",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          }
        ],
        "scope": 1892,
        "src": "225:1127:37",
        "usedErrors": []
      }
    ],
    "src": "116:1237:37"
  },
  "bytecode": "60806040526104ed806100136000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c806309bd5a601461005c57806312065fe0146100965780636f6b460a1461009c578063e78e3000146100b1578063f3fe12c9146100b9575b600080fd5b6100837f564ccaf7594d66b1eaaea24fe01f0585bf52ee70852af4eac0cc4b04711cd0e281565b6040519081526020015b60405180910390f35b47610083565b6100a46100ce565b60405161008d91906102d1565b6100a4610115565b6100cc6100c736600461031a565b610135565b005b606060005b60648110156100f657603281146100f657806100ee816103cb565b9150506100d3565b5060405180608001604052806056815260200161040f60569139905090565b606060405180608001604052806053815260200161046560539139905090565b8060405160200161014691906103f2565b604051602081830303815290604052805190602001207f564ccaf7594d66b1eaaea24fe01f0585bf52ee70852af4eac0cc4b04711cd0e260001b146101c75760405162461bcd60e51b8152602060048201526012602482015271496e636f727265637420726573706f6e736560701b60448201526064015b60405180910390fd5b678ac7230489e800004710156102125760405162461bcd60e51b815260206004820152601060248201526f2737ba1032b737bab3b41032ba3432b960811b60448201526064016101be565b6040516000903390678ac7230489e80000908381818185875af1925050503d806000811461025c576040519150601f19603f3d011682016040523d82523d6000602084013e610261565b606091505b50509050806102a95760405162461bcd60e51b81526020600482015260146024820152732330b4b632b2103a379039b2b7321022ba3432b960611b60448201526064016101be565b5050565b60005b838110156102c85781810151838201526020016102b0565b50506000910152565b60208152600082518060208401526102f08160408501602087016102ad565b601f01601f19169190910160400192915050565b634e487b7160e01b600052604160045260246000fd5b60006020828403121561032c57600080fd5b813567ffffffffffffffff8082111561034457600080fd5b818401915084601f83011261035857600080fd5b81358181111561036a5761036a610304565b604051601f8201601f19908116603f0116810190838211818310171561039257610392610304565b816040528281528760208487010111156103ab57600080fd5b826020860160208301376000928101602001929092525095945050505050565b6000600182016103eb57634e487b7160e01b600052601160045260246000fd5b5060010190565b600082516104048184602087016102ad565b919091019291505056fe4920616d206120636f6d706c69636174652066756e6374696f6e2c204920616d206e6f74207573656420666f7220616e797468696e672c204920616d206a757374206865726520746f206d616b6520796f75206372794920616d20612066756e6e792066756e6374696f6e2c204920616d206e6f74207573656420666f7220616e797468696e672c204920616d206a757374206865726520746f206d616b6520796f75206c61756768a2646970667358221220f941ae6541b6d333d6a0767e4b2406e857a4dc9741cc816aae08b46da0ed209564736f6c63430008130033",
  "bytecodeSha1": "026d1eb3ac5558d790065d89597dd4b3e7771b92",
  "compiler": {
    "evm_version": "istanbul",
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "version": "0.8.19+commit.7dd6d404"
  },
  "contractName": "FindMe",
  "coverageMap": {
    "branches": {
      "37": {
        "FindMe.claim": {
          "8": [
            466,
            511,
            true
          ],
          "9": [
            573,
            606,
            true
          ],
          "10": [
            708,
            712,
            true
          ]
        }
      }
    },
    "statements": {
      "37": {
        "FindMe.claim": {
          "5": [
            445,
            555
          ],
          "6": [
            565,
            627
          ],
          "7": [
            700,
            737
          ]
        },
        "FindMe.complicateFunction": {
          "1": [
            1093,
            1098
          ],
          "2": [
            1043,
            1046
          ],
          "3": [
            1133,
            1240
          ]
        },
        "FindMe.funnyFunction": {
          "4": [
            821,
            925
          ]
        },
        "FindMe.getBalance": {
          "0": [
            1315,
            1343
          ]
        }
      }
    }
  },
  "dependencies": [],
  "deployedBytecode": "608060405234801561001057600080fd5b50600436106100575760003560e01c806309bd5a601461005c57806312065fe0146100965780636f6b460a1461009c578063e78e3000146100b1578063f3fe12c9146100b9575b600080fd5b6100837f564ccaf7594d66b1eaaea24fe01f0585bf52ee70852af4eac0cc4b04711cd0e281565b6040519081526020015b60405180910390f35b47610083565b6100a46100ce565b60405161008d91906102d1565b6100a4610115565b6100cc6100c736600461031a565b610135565b005b606060005b60648110156100f657603281146100f657806100ee816103cb565b9150506100d3565b5060405180608001604052806056815260200161040f60569139905090565b606060405180608001604052806053815260200161046560539139905090565b8060405160200161014691906103f2565b604051602081830303815290604052805190602001207f564ccaf7594d66b1eaaea24fe01f0585bf52ee70852af4eac0cc4b04711cd0e260001b146101c75760405162461bcd60e51b8152602060048201526012602482015271496e636f727265637420726573706f6e736560701b60448201526064015b60405180910390fd5b678ac7230489e800004710156102125760405162461bcd60e51b815260206004820152601060248201526f2737ba1032b737bab3b41032ba3432b960811b60448201526064016101be565b6040516000903390678ac7230489e80000908381818185875af1925050503d806000811461025c576040519150601f19603f3d011682016040523d82523d6000602084013e610261565b606091505b50509050806102a95760405162461bcd60e51b81526020600482015260146024820152732330b4b632b2103a379039b2b7321022ba3432b960611b60448201526064016101be565b5050565b60005b838110156102c85781810151838201526020016102b0565b50506000910152565b60208152600082518060208401526102f08160408501602087016102ad565b601f01601f19169190910160400192915050565b634e487b7160e01b600052604160045260246000fd5b60006020828403121561032c57600080fd5b813567ffffffffffffffff8082111561034457600080fd5b818401915084601f83011261035857600080fd5b81358181111561036a5761036a610304565b604051601f8201601f19908116603f0116810190838211818310171561039257610392610304565b816040528281528760208487010111156103ab57600080fd5b826020860160208301376000928101602001929092525095945050505050565b6000600182016103eb57634e487b7160e01b600052601160045260246000fd5b5060010190565b600082516104048184602087016102ad565b919091019291505056fe4920616d206120636f6d706c69636174652066756e6374696f6e2c204920616d206e6f74207573656420666f7220616e797468696e672c204920616d206a757374206865726520746f206d616b6520796f75206372794920616d20612066756e6e792066756e6374696f6e2c204920616d206e6f74207573656420666f7220616e797468696e672c204920616d206a757374206865726520746f206d616b6520796f75206c61756768a2646970667358221220f941ae6541b6d333d6a0767e4b2406e857a4dc9741cc816aae08b46da0ed209564736f6c63430008130033",
  "deployedSourceMap": "225:1127:37:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;247:105;;286:66;247:105;;;;;160:25:63;;;148:2;133:18;247:105:37;;;;;;;;1253:97;1322:21;1253:97;;938:309;;;:::i;:::-;;;;;;;:::i;750:182::-;;;:::i;389:355::-;;;;;;:::i;:::-;;:::i;:::-;;938:309;989:13;1019:9;1014:109;1038:3;1034:1;:7;1014:109;;;1071:2;1062:51;;1093:5;1062:51;1043:3;;;;:::i;:::-;;;;1014:109;;;;1133:107;;;;;;;;;;;;;;;;;;;938:309;:::o;750:182::-;796:13;821:104;;;;;;;;;;;;;;;;;;;750:182;:::o;389:355::-;501:8;484:26;;;;;;;;:::i;:::-;;;;;;;;;;;;;474:37;;;;;;286:66;466:4;;:45;445:110;;;;-1:-1:-1;;;445:110:37;;2826:2:63;445:110:37;;;2808:21:63;2865:2;2845:18;;;2838:30;-1:-1:-1;;;2884:18:63;;;2877:48;2942:18;;445:110:37;;;;;;;;;598:8;573:21;:33;;565:62;;;;-1:-1:-1;;;565:62:37;;3173:2:63;565:62:37;;;3155:21:63;3212:2;3192:18;;;3185:30;-1:-1:-1;;;3231:18:63;;;3224:46;3287:18;;565:62:37;2971:340:63;565:62:37;653:36;;638:9;;653:10;;676:8;;638:9;653:36;638:9;653:36;676:8;653:10;:36;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;637:52;;;708:4;700:37;;;;-1:-1:-1;;;700:37:37;;3728:2:63;700:37:37;;;3710:21:63;3767:2;3747:18;;;3740:30;-1:-1:-1;;;3786:18:63;;;3779:50;3846:18;;700:37:37;3526:344:63;700:37:37;435:309;389:355;:::o;378:250:63:-;463:1;473:113;487:6;484:1;481:13;473:113;;;563:11;;;557:18;544:11;;;537:39;509:2;502:10;473:113;;;-1:-1:-1;;620:1:63;602:16;;595:27;378:250::o;633:396::-;782:2;771:9;764:21;745:4;814:6;808:13;857:6;852:2;841:9;837:18;830:34;873:79;945:6;940:2;929:9;925:18;920:2;912:6;908:15;873:79;:::i;:::-;1013:2;992:15;-1:-1:-1;;988:29:63;973:45;;;;1020:2;969:54;;633:396;-1:-1:-1;;633:396:63:o;1034:127::-;1095:10;1090:3;1086:20;1083:1;1076:31;1126:4;1123:1;1116:15;1150:4;1147:1;1140:15;1166:922;1235:6;1288:2;1276:9;1267:7;1263:23;1259:32;1256:52;;;1304:1;1301;1294:12;1256:52;1344:9;1331:23;1373:18;1414:2;1406:6;1403:14;1400:34;;;1430:1;1427;1420:12;1400:34;1468:6;1457:9;1453:22;1443:32;;1513:7;1506:4;1502:2;1498:13;1494:27;1484:55;;1535:1;1532;1525:12;1484:55;1571:2;1558:16;1593:2;1589;1586:10;1583:36;;;1599:18;;:::i;:::-;1674:2;1668:9;1642:2;1728:13;;-1:-1:-1;;1724:22:63;;;1748:2;1720:31;1716:40;1704:53;;;1772:18;;;1792:22;;;1769:46;1766:72;;;1818:18;;:::i;:::-;1858:10;1854:2;1847:22;1893:2;1885:6;1878:18;1933:7;1928:2;1923;1919;1915:11;1911:20;1908:33;1905:53;;;1954:1;1951;1944:12;1905:53;2010:2;2005;2001;1997:11;1992:2;1984:6;1980:15;1967:46;2055:1;2033:15;;;2050:2;2029:24;2022:35;;;;-1:-1:-1;2037:6:63;1166:922;-1:-1:-1;;;;;1166:922:63:o;2093:232::-;2132:3;2153:17;;;2150:140;;2212:10;2207:3;2203:20;2200:1;2193:31;2247:4;2244:1;2237:15;2275:4;2272:1;2265:15;2150:140;-1:-1:-1;2317:1:63;2306:13;;2093:232::o;2330:289::-;2461:3;2499:6;2493:13;2515:66;2574:6;2569:3;2562:4;2554:6;2550:17;2515:66;:::i;:::-;2597:16;;;;;2330:289;-1:-1:-1;;2330:289:63:o",
  "language": "Solidity",
  "natspec": {
    "author": "JohnnyTime (https://smartcontractshacking.com)",
    "kind": "dev",
    "methods": {},
    "title": "FindMe",
    "version": 1
  },
  "offset": [
    225,
    1352
  ],
  "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x57 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x9BD5A60 EQ PUSH2 0x5C JUMPI DUP1 PUSH4 0x12065FE0 EQ PUSH2 0x96 JUMPI DUP1 PUSH4 0x6F6B460A EQ PUSH2 0x9C JUMPI DUP1 PUSH4 0xE78E3000 EQ PUSH2 0xB1 JUMPI DUP1 PUSH4 0xF3FE12C9 EQ PUSH2 0xB9 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x83 PUSH32 0x564CCAF7594D66B1EAAEA24FE01F0585BF52EE70852AF4EAC0CC4B04711CD0E2 DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST SELFBALANCE PUSH2 0x83 JUMP JUMPDEST PUSH2 0xA4 PUSH2 0xCE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x8D SWAP2 SWAP1 PUSH2 0x2D1 JUMP JUMPDEST PUSH2 0xA4 PUSH2 0x115 JUMP JUMPDEST PUSH2 0xCC PUSH2 0xC7 CALLDATASIZE PUSH1 0x4 PUSH2 0x31A JUMP JUMPDEST PUSH2 0x135 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x60 PUSH1 0x0 JUMPDEST PUSH1 0x64 DUP2 LT ISZERO PUSH2 0xF6 JUMPI PUSH1 0x32 DUP2 EQ PUSH2 0xF6 JUMPI DUP1 PUSH2 0xEE DUP2 PUSH2 0x3CB JUMP JUMPDEST SWAP2 POP POP PUSH2 0xD3 JUMP JUMPDEST POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x56 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x40F PUSH1 0x56 SWAP2 CODECOPY SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x53 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x465 PUSH1 0x53 SWAP2 CODECOPY SWAP1 POP SWAP1 JUMP JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x146 SWAP2 SWAP1 PUSH2 0x3F2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH32 0x564CCAF7594D66B1EAAEA24FE01F0585BF52EE70852AF4EAC0CC4B04711CD0E2 PUSH1 0x0 SHL EQ PUSH2 0x1C7 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x12 PUSH1 0x24 DUP3 ADD MSTORE PUSH18 0x496E636F727265637420726573706F6E7365 PUSH1 0x70 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH8 0x8AC7230489E80000 SELFBALANCE LT ISZERO PUSH2 0x212 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x10 PUSH1 0x24 DUP3 ADD MSTORE PUSH16 0x2737BA1032B737BAB3B41032BA3432B9 PUSH1 0x81 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x1BE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x0 SWAP1 CALLER SWAP1 PUSH8 0x8AC7230489E80000 SWAP1 DUP4 DUP2 DUP2 DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x25C JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x261 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x2A9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x2330B4B632B2103A379039B2B7321022BA3432B9 PUSH1 0x61 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x1BE JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x2C8 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x2B0 JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x2F0 DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x2AD JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x32C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x344 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP5 ADD SWAP2 POP DUP5 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x358 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x36A JUMPI PUSH2 0x36A PUSH2 0x304 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP4 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH2 0x392 JUMPI PUSH2 0x392 PUSH2 0x304 JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP3 DUP2 MSTORE DUP8 PUSH1 0x20 DUP5 DUP8 ADD ADD GT ISZERO PUSH2 0x3AB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 SWAP3 DUP2 ADD PUSH1 0x20 ADD SWAP3 SWAP1 SWAP3 MSTORE POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 ADD PUSH2 0x3EB JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x404 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x2AD JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP INVALID 0x49 KECCAK256 PUSH2 0x6D20 PUSH2 0x2063 PUSH16 0x6D706C69636174652066756E6374696F PUSH15 0x2C204920616D206E6F742075736564 KECCAK256 PUSH7 0x6F7220616E7974 PUSH9 0x696E672C204920616D KECCAK256 PUSH11 0x757374206865726520746F KECCAK256 PUSH14 0x616B6520796F7520637279492061 PUSH14 0x20612066756E6E792066756E6374 PUSH10 0x6F6E2C204920616D206E PUSH16 0x74207573656420666F7220616E797468 PUSH10 0x6E672C204920616D206A PUSH22 0x7374206865726520746F206D616B6520796F75206C61 PUSH22 0x6768A2646970667358221220F941AE6541B6D333D6A0 PUSH23 0x7E4B2406E857A4DC9741CC816AAE08B46DA0ED20956473 PUSH16 0x6C634300081300330000000000000000 ",
  "pcMap": {
    "0": {
      "offset": [
        225,
        1352
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x80"
    },
    "2": {
      "fn": null,
      "offset": [
        225,
        1352
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x40"
    },
    "4": {
      "fn": null,
      "offset": [
        225,
        1352
      ],
      "op": "MSTORE",
      "path": "37"
    },
    "5": {
      "fn": null,
      "offset": [
        225,
        1352
      ],
      "op": "CALLVALUE",
      "path": "37"
    },
    "6": {
      "fn": null,
      "offset": [
        225,
        1352
      ],
      "op": "DUP1",
      "path": "37"
    },
    "7": {
      "fn": null,
      "offset": [
        225,
        1352
      ],
      "op": "ISZERO",
      "path": "37"
    },
    "8": {
      "fn": null,
      "offset": [
        225,
        1352
      ],
      "op": "PUSH2",
      "path": "37",
      "value": "0x10"
    },
    "11": {
      "fn": null,
      "offset": [
        225,
        1352
      ],
      "op": "JUMPI",
      "path": "37"
    },
    "12": {
      "fn": null,
      "offset": [
        225,
        1352
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x0"
    },
    "14": {
      "fn": null,
      "offset": [
        225,
        1352
      ],
      "op": "DUP1",
      "path": "37"
    },
    "15": {
      "dev": "Cannot send ether to nonpayable function",
      "fn": null,
      "offset": [
        225,
        1352
      ],
      "op": "REVERT",
      "path": "37"
    },
    "16": {
      "fn": null,
      "offset": [
        225,
        1352
      ],
      "op": "JUMPDEST",
      "path": "37"
    },
    "17": {
      "fn": null,
      "offset": [
        225,
        1352
      ],
      "op": "POP",
      "path": "37"
    },
    "18": {
      "fn": null,
      "offset": [
        225,
        1352
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x4"
    },
    "20": {
      "fn": null,
      "offset": [
        225,
        1352
      ],
      "op": "CALLDATASIZE",
      "path": "37"
    },
    "21": {
      "fn": null,
      "offset": [
        225,
        1352
      ],
      "op": "LT",
      "path": "37"
    },
    "22": {
      "fn": null,
      "offset": [
        225,
        1352
      ],
      "op": "PUSH2",
      "path": "37",
      "value": "0x57"
    },
    "25": {
      "fn": null,
      "offset": [
        225,
        1352
      ],
      "op": "JUMPI",
      "path": "37"
    },
    "26": {
      "fn": null,
      "offset": [
        225,
        1352
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x0"
    },
    "28": {
      "fn": null,
      "offset": [
        225,
        1352
      ],
      "op": "CALLDATALOAD",
      "path": "37"
    },
    "29": {
      "fn": null,
      "offset": [
        225,
        1352
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0xE0"
    },
    "31": {
      "fn": null,
      "offset": [
        225,
        1352
      ],
      "op": "SHR",
      "path": "37"
    },
    "32": {
      "fn": null,
      "offset": [
        225,
        1352
      ],
      "op": "DUP1",
      "path": "37"
    },
    "33": {
      "fn": null,
      "offset": [
        225,
        1352
      ],
      "op": "PUSH4",
      "path": "37",
      "value": "0x9BD5A60"
    },
    "38": {
      "fn": null,
      "offset": [
        225,
        1352
      ],
      "op": "EQ",
      "path": "37"
    },
    "39": {
      "fn": null,
      "offset": [
        225,
        1352
      ],
      "op": "PUSH2",
      "path": "37",
      "value": "0x5C"
    },
    "42": {
      "fn": null,
      "offset": [
        225,
        1352
      ],
      "op": "JUMPI",
      "path": "37"
    },
    "43": {
      "fn": null,
      "offset": [
        225,
        1352
      ],
      "op": "DUP1",
      "path": "37"
    },
    "44": {
      "fn": null,
      "offset": [
        225,
        1352
      ],
      "op": "PUSH4",
      "path": "37",
      "value": "0x12065FE0"
    },
    "49": {
      "fn": null,
      "offset": [
        225,
        1352
      ],
      "op": "EQ",
      "path": "37"
    },
    "50": {
      "fn": null,
      "offset": [
        225,
        1352
      ],
      "op": "PUSH2",
      "path": "37",
      "value": "0x96"
    },
    "53": {
      "fn": null,
      "offset": [
        225,
        1352
      ],
      "op": "JUMPI",
      "path": "37"
    },
    "54": {
      "fn": null,
      "offset": [
        225,
        1352
      ],
      "op": "DUP1",
      "path": "37"
    },
    "55": {
      "fn": null,
      "offset": [
        225,
        1352
      ],
      "op": "PUSH4",
      "path": "37",
      "value": "0x6F6B460A"
    },
    "60": {
      "fn": null,
      "offset": [
        225,
        1352
      ],
      "op": "EQ",
      "path": "37"
    },
    "61": {
      "fn": null,
      "offset": [
        225,
        1352
      ],
      "op": "PUSH2",
      "path": "37",
      "value": "0x9C"
    },
    "64": {
      "fn": null,
      "offset": [
        225,
        1352
      ],
      "op": "JUMPI",
      "path": "37"
    },
    "65": {
      "fn": null,
      "offset": [
        225,
        1352
      ],
      "op": "DUP1",
      "path": "37"
    },
    "66": {
      "fn": null,
      "offset": [
        225,
        1352
      ],
      "op": "PUSH4",
      "path": "37",
      "value": "0xE78E3000"
    },
    "71": {
      "fn": null,
      "offset": [
        225,
        1352
      ],
      "op": "EQ",
      "path": "37"
    },
    "72": {
      "fn": null,
      "offset": [
        225,
        1352
      ],
      "op": "PUSH2",
      "path": "37",
      "value": "0xB1"
    },
    "75": {
      "fn": null,
      "offset": [
        225,
        1352
      ],
      "op": "JUMPI",
      "path": "37"
    },
    "76": {
      "fn": null,
      "offset": [
        225,
        1352
      ],
      "op": "DUP1",
      "path": "37"
    },
    "77": {
      "fn": null,
      "offset": [
        225,
        1352
      ],
      "op": "PUSH4",
      "path": "37",
      "value": "0xF3FE12C9"
    },
    "82": {
      "fn": null,
      "offset": [
        225,
        1352
      ],
      "op": "EQ",
      "path": "37"
    },
    "83": {
      "fn": null,
      "offset": [
        225,
        1352
      ],
      "op": "PUSH2",
      "path": "37",
      "value": "0xB9"
    },
    "86": {
      "fn": null,
      "offset": [
        225,
        1352
      ],
      "op": "JUMPI",
      "path": "37"
    },
    "87": {
      "fn": null,
      "offset": [
        225,
        1352
      ],
      "op": "JUMPDEST",
      "path": "37"
    },
    "88": {
      "fn": null,
      "offset": [
        225,
        1352
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x0"
    },
    "90": {
      "fn": null,
      "offset": [
        225,
        1352
      ],
      "op": "DUP1",
      "path": "37"
    },
    "91": {
      "first_revert": true,
      "fn": null,
      "offset": [
        225,
        1352
      ],
      "op": "REVERT",
      "path": "37"
    },
    "92": {
      "offset": [
        247,
        352
      ],
      "op": "JUMPDEST",
      "path": "37"
    },
    "93": {
      "fn": null,
      "offset": [
        247,
        352
      ],
      "op": "PUSH2",
      "path": "37",
      "value": "0x83"
    },
    "96": {
      "offset": [
        286,
        352
      ],
      "op": "PUSH32",
      "path": "37",
      "value": "0x564CCAF7594D66B1EAAEA24FE01F0585BF52EE70852AF4EAC0CC4B04711CD0E2"
    },
    "129": {
      "offset": [
        247,
        352
      ],
      "op": "DUP2",
      "path": "37"
    },
    "130": {
      "fn": null,
      "offset": [
        247,
        352
      ],
      "op": "JUMP",
      "path": "37"
    },
    "131": {
      "fn": null,
      "offset": [
        247,
        352
      ],
      "op": "JUMPDEST",
      "path": "37"
    },
    "132": {
      "fn": null,
      "offset": [
        247,
        352
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x40"
    },
    "134": {
      "fn": null,
      "offset": [
        247,
        352
      ],
      "op": "MLOAD",
      "path": "37"
    },
    "135": {
      "op": "SWAP1"
    },
    "136": {
      "op": "DUP2"
    },
    "137": {
      "op": "MSTORE"
    },
    "138": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "140": {
      "op": "ADD"
    },
    "141": {
      "offset": [
        247,
        352
      ],
      "op": "JUMPDEST",
      "path": "37"
    },
    "142": {
      "fn": null,
      "offset": [
        247,
        352
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x40"
    },
    "144": {
      "fn": null,
      "offset": [
        247,
        352
      ],
      "op": "MLOAD",
      "path": "37"
    },
    "145": {
      "fn": null,
      "offset": [
        247,
        352
      ],
      "op": "DUP1",
      "path": "37"
    },
    "146": {
      "fn": null,
      "offset": [
        247,
        352
      ],
      "op": "SWAP2",
      "path": "37"
    },
    "147": {
      "fn": null,
      "offset": [
        247,
        352
      ],
      "op": "SUB",
      "path": "37"
    },
    "148": {
      "fn": null,
      "offset": [
        247,
        352
      ],
      "op": "SWAP1",
      "path": "37"
    },
    "149": {
      "fn": null,
      "offset": [
        247,
        352
      ],
      "op": "RETURN",
      "path": "37"
    },
    "150": {
      "fn": "FindMe.getBalance",
      "offset": [
        1253,
        1350
      ],
      "op": "JUMPDEST",
      "path": "37"
    },
    "151": {
      "fn": "FindMe.getBalance",
      "offset": [
        1322,
        1343
      ],
      "op": "SELFBALANCE",
      "path": "37",
      "statement": 0
    },
    "152": {
      "fn": "FindMe.getBalance",
      "offset": [
        1253,
        1350
      ],
      "op": "PUSH2",
      "path": "37",
      "value": "0x83"
    },
    "155": {
      "fn": "FindMe.getBalance",
      "offset": [
        1253,
        1350
      ],
      "op": "JUMP",
      "path": "37"
    },
    "156": {
      "fn": "FindMe.complicateFunction",
      "offset": [
        938,
        1247
      ],
      "op": "JUMPDEST",
      "path": "37"
    },
    "157": {
      "fn": "FindMe.complicateFunction",
      "offset": [
        938,
        1247
      ],
      "op": "PUSH2",
      "path": "37",
      "value": "0xA4"
    },
    "160": {
      "fn": "FindMe.complicateFunction",
      "offset": [
        938,
        1247
      ],
      "op": "PUSH2",
      "path": "37",
      "value": "0xCE"
    },
    "163": {
      "fn": "FindMe.complicateFunction",
      "jump": "i",
      "offset": [
        938,
        1247
      ],
      "op": "JUMP",
      "path": "37"
    },
    "164": {
      "fn": "FindMe.complicateFunction",
      "offset": [
        938,
        1247
      ],
      "op": "JUMPDEST",
      "path": "37"
    },
    "165": {
      "fn": "FindMe.complicateFunction",
      "offset": [
        938,
        1247
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x40"
    },
    "167": {
      "fn": "FindMe.complicateFunction",
      "offset": [
        938,
        1247
      ],
      "op": "MLOAD",
      "path": "37"
    },
    "168": {
      "fn": "FindMe.complicateFunction",
      "offset": [
        938,
        1247
      ],
      "op": "PUSH2",
      "path": "37",
      "value": "0x8D"
    },
    "171": {
      "fn": "FindMe.complicateFunction",
      "offset": [
        938,
        1247
      ],
      "op": "SWAP2",
      "path": "37"
    },
    "172": {
      "fn": "FindMe.complicateFunction",
      "offset": [
        938,
        1247
      ],
      "op": "SWAP1",
      "path": "37"
    },
    "173": {
      "fn": "FindMe.complicateFunction",
      "offset": [
        938,
        1247
      ],
      "op": "PUSH2",
      "path": "37",
      "value": "0x2D1"
    },
    "176": {
      "fn": "FindMe.complicateFunction",
      "jump": "i",
      "offset": [
        938,
        1247
      ],
      "op": "JUMP",
      "path": "37"
    },
    "177": {
      "fn": "FindMe.funnyFunction",
      "offset": [
        750,
        932
      ],
      "op": "JUMPDEST",
      "path": "37"
    },
    "178": {
      "fn": "FindMe.funnyFunction",
      "offset": [
        750,
        932
      ],
      "op": "PUSH2",
      "path": "37",
      "value": "0xA4"
    },
    "181": {
      "fn": "FindMe.funnyFunction",
      "offset": [
        750,
        932
      ],
      "op": "PUSH2",
      "path": "37",
      "value": "0x115"
    },
    "184": {
      "fn": "FindMe.funnyFunction",
      "jump": "i",
      "offset": [
        750,
        932
      ],
      "op": "JUMP",
      "path": "37"
    },
    "185": {
      "fn": "FindMe.claim",
      "offset": [
        389,
        744
      ],
      "op": "JUMPDEST",
      "path": "37"
    },
    "186": {
      "fn": "FindMe.claim",
      "offset": [
        389,
        744
      ],
      "op": "PUSH2",
      "path": "37",
      "value": "0xCC"
    },
    "189": {
      "fn": "FindMe.claim",
      "offset": [
        389,
        744
      ],
      "op": "PUSH2",
      "path": "37",
      "value": "0xC7"
    },
    "192": {
      "fn": "FindMe.claim",
      "offset": [
        389,
        744
      ],
      "op": "CALLDATASIZE",
      "path": "37"
    },
    "193": {
      "fn": "FindMe.claim",
      "offset": [
        389,
        744
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x4"
    },
    "195": {
      "fn": "FindMe.claim",
      "offset": [
        389,
        744
      ],
      "op": "PUSH2",
      "path": "37",
      "value": "0x31A"
    },
    "198": {
      "fn": "FindMe.claim",
      "jump": "i",
      "offset": [
        389,
        744
      ],
      "op": "JUMP",
      "path": "37"
    },
    "199": {
      "fn": "FindMe.claim",
      "offset": [
        389,
        744
      ],
      "op": "JUMPDEST",
      "path": "37"
    },
    "200": {
      "fn": "FindMe.claim",
      "offset": [
        389,
        744
      ],
      "op": "PUSH2",
      "path": "37",
      "value": "0x135"
    },
    "203": {
      "fn": "FindMe.claim",
      "jump": "i",
      "offset": [
        389,
        744
      ],
      "op": "JUMP",
      "path": "37"
    },
    "204": {
      "fn": "FindMe.claim",
      "offset": [
        389,
        744
      ],
      "op": "JUMPDEST",
      "path": "37"
    },
    "205": {
      "fn": "FindMe.claim",
      "offset": [
        389,
        744
      ],
      "op": "STOP",
      "path": "37"
    },
    "206": {
      "fn": "FindMe.complicateFunction",
      "offset": [
        938,
        1247
      ],
      "op": "JUMPDEST",
      "path": "37"
    },
    "207": {
      "fn": "FindMe.complicateFunction",
      "offset": [
        989,
        1002
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x60"
    },
    "209": {
      "fn": "FindMe.complicateFunction",
      "offset": [
        1019,
        1028
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x0"
    },
    "211": {
      "fn": "FindMe.complicateFunction",
      "offset": [
        1014,
        1123
      ],
      "op": "JUMPDEST",
      "path": "37"
    },
    "212": {
      "fn": "FindMe.complicateFunction",
      "offset": [
        1038,
        1041
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x64"
    },
    "214": {
      "fn": "FindMe.complicateFunction",
      "offset": [
        1034,
        1035
      ],
      "op": "DUP2",
      "path": "37"
    },
    "215": {
      "fn": "FindMe.complicateFunction",
      "offset": [
        1034,
        1041
      ],
      "op": "LT",
      "path": "37"
    },
    "216": {
      "fn": "FindMe.complicateFunction",
      "offset": [
        1014,
        1123
      ],
      "op": "ISZERO",
      "path": "37"
    },
    "217": {
      "fn": "FindMe.complicateFunction",
      "offset": [
        1014,
        1123
      ],
      "op": "PUSH2",
      "path": "37",
      "value": "0xF6"
    },
    "220": {
      "fn": "FindMe.complicateFunction",
      "offset": [
        1014,
        1123
      ],
      "op": "JUMPI",
      "path": "37"
    },
    "221": {
      "fn": "FindMe.complicateFunction",
      "offset": [
        1071,
        1073
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x32"
    },
    "223": {
      "fn": "FindMe.complicateFunction",
      "offset": [
        1062,
        1113
      ],
      "op": "DUP2",
      "path": "37"
    },
    "224": {
      "fn": "FindMe.complicateFunction",
      "offset": [
        1062,
        1113
      ],
      "op": "EQ",
      "path": "37"
    },
    "225": {
      "fn": "FindMe.complicateFunction",
      "offset": [
        1093,
        1098
      ],
      "op": "PUSH2",
      "path": "37",
      "statement": 1,
      "value": "0xF6"
    },
    "228": {
      "fn": "FindMe.complicateFunction",
      "offset": [
        1062,
        1113
      ],
      "op": "JUMPI",
      "path": "37"
    },
    "229": {
      "fn": "FindMe.complicateFunction",
      "offset": [
        1043,
        1046
      ],
      "op": "DUP1",
      "path": "37",
      "statement": 2
    },
    "230": {
      "fn": "FindMe.complicateFunction",
      "offset": [
        1043,
        1046
      ],
      "op": "PUSH2",
      "path": "37",
      "value": "0xEE"
    },
    "233": {
      "fn": "FindMe.complicateFunction",
      "offset": [
        1043,
        1046
      ],
      "op": "DUP2",
      "path": "37"
    },
    "234": {
      "fn": "FindMe.complicateFunction",
      "offset": [
        1043,
        1046
      ],
      "op": "PUSH2",
      "path": "37",
      "value": "0x3CB"
    },
    "237": {
      "fn": "FindMe.complicateFunction",
      "jump": "i",
      "offset": [
        1043,
        1046
      ],
      "op": "JUMP",
      "path": "37"
    },
    "238": {
      "fn": "FindMe.complicateFunction",
      "offset": [
        1043,
        1046
      ],
      "op": "JUMPDEST",
      "path": "37"
    },
    "239": {
      "fn": "FindMe.complicateFunction",
      "offset": [
        1043,
        1046
      ],
      "op": "SWAP2",
      "path": "37"
    },
    "240": {
      "fn": "FindMe.complicateFunction",
      "offset": [
        1043,
        1046
      ],
      "op": "POP",
      "path": "37"
    },
    "241": {
      "fn": "FindMe.complicateFunction",
      "offset": [
        1043,
        1046
      ],
      "op": "POP",
      "path": "37"
    },
    "242": {
      "fn": "FindMe.complicateFunction",
      "offset": [
        1014,
        1123
      ],
      "op": "PUSH2",
      "path": "37",
      "value": "0xD3"
    },
    "245": {
      "fn": "FindMe.complicateFunction",
      "offset": [
        1014,
        1123
      ],
      "op": "JUMP",
      "path": "37"
    },
    "246": {
      "fn": "FindMe.complicateFunction",
      "offset": [
        1014,
        1123
      ],
      "op": "JUMPDEST",
      "path": "37"
    },
    "247": {
      "fn": "FindMe.complicateFunction",
      "offset": [
        1014,
        1123
      ],
      "op": "POP",
      "path": "37"
    },
    "248": {
      "fn": "FindMe.complicateFunction",
      "offset": [
        1133,
        1240
      ],
      "op": "PUSH1",
      "path": "37",
      "statement": 3,
      "value": "0x40"
    },
    "250": {
      "fn": "FindMe.complicateFunction",
      "offset": [
        1133,
        1240
      ],
      "op": "MLOAD",
      "path": "37"
    },
    "251": {
      "fn": "FindMe.complicateFunction",
      "offset": [
        1133,
        1240
      ],
      "op": "DUP1",
      "path": "37"
    },
    "252": {
      "fn": "FindMe.complicateFunction",
      "offset": [
        1133,
        1240
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x80"
    },
    "254": {
      "fn": "FindMe.complicateFunction",
      "offset": [
        1133,
        1240
      ],
      "op": "ADD",
      "path": "37"
    },
    "255": {
      "fn": "FindMe.complicateFunction",
      "offset": [
        1133,
        1240
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x40"
    },
    "257": {
      "fn": "FindMe.complicateFunction",
      "offset": [
        1133,
        1240
      ],
      "op": "MSTORE",
      "path": "37"
    },
    "258": {
      "fn": "FindMe.complicateFunction",
      "offset": [
        1133,
        1240
      ],
      "op": "DUP1",
      "path": "37"
    },
    "259": {
      "fn": "FindMe.complicateFunction",
      "offset": [
        1133,
        1240
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x56"
    },
    "261": {
      "fn": "FindMe.complicateFunction",
      "offset": [
        1133,
        1240
      ],
      "op": "DUP2",
      "path": "37"
    },
    "262": {
      "fn": "FindMe.complicateFunction",
      "offset": [
        1133,
        1240
      ],
      "op": "MSTORE",
      "path": "37"
    },
    "263": {
      "fn": "FindMe.complicateFunction",
      "offset": [
        1133,
        1240
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x20"
    },
    "265": {
      "fn": "FindMe.complicateFunction",
      "offset": [
        1133,
        1240
      ],
      "op": "ADD",
      "path": "37"
    },
    "266": {
      "fn": "FindMe.complicateFunction",
      "offset": [
        1133,
        1240
      ],
      "op": "PUSH2",
      "path": "37",
      "value": "0x40F"
    },
    "269": {
      "fn": "FindMe.complicateFunction",
      "offset": [
        1133,
        1240
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x56"
    },
    "271": {
      "fn": "FindMe.complicateFunction",
      "offset": [
        1133,
        1240
      ],
      "op": "SWAP2",
      "path": "37"
    },
    "272": {
      "fn": "FindMe.complicateFunction",
      "offset": [
        1133,
        1240
      ],
      "op": "CODECOPY",
      "path": "37"
    },
    "273": {
      "fn": "FindMe.complicateFunction",
      "offset": [
        1133,
        1240
      ],
      "op": "SWAP1",
      "path": "37"
    },
    "274": {
      "fn": "FindMe.complicateFunction",
      "offset": [
        1133,
        1240
      ],
      "op": "POP",
      "path": "37"
    },
    "275": {
      "fn": "FindMe.complicateFunction",
      "offset": [
        938,
        1247
      ],
      "op": "SWAP1",
      "path": "37"
    },
    "276": {
      "fn": "FindMe.complicateFunction",
      "jump": "o",
      "offset": [
        938,
        1247
      ],
      "op": "JUMP",
      "path": "37"
    },
    "277": {
      "fn": "FindMe.funnyFunction",
      "offset": [
        750,
        932
      ],
      "op": "JUMPDEST",
      "path": "37"
    },
    "278": {
      "fn": "FindMe.funnyFunction",
      "offset": [
        796,
        809
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x60"
    },
    "280": {
      "fn": "FindMe.funnyFunction",
      "offset": [
        821,
        925
      ],
      "op": "PUSH1",
      "path": "37",
      "statement": 4,
      "value": "0x40"
    },
    "282": {
      "fn": "FindMe.funnyFunction",
      "offset": [
        821,
        925
      ],
      "op": "MLOAD",
      "path": "37"
    },
    "283": {
      "fn": "FindMe.funnyFunction",
      "offset": [
        821,
        925
      ],
      "op": "DUP1",
      "path": "37"
    },
    "284": {
      "fn": "FindMe.funnyFunction",
      "offset": [
        821,
        925
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x80"
    },
    "286": {
      "fn": "FindMe.funnyFunction",
      "offset": [
        821,
        925
      ],
      "op": "ADD",
      "path": "37"
    },
    "287": {
      "fn": "FindMe.funnyFunction",
      "offset": [
        821,
        925
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x40"
    },
    "289": {
      "fn": "FindMe.funnyFunction",
      "offset": [
        821,
        925
      ],
      "op": "MSTORE",
      "path": "37"
    },
    "290": {
      "fn": "FindMe.funnyFunction",
      "offset": [
        821,
        925
      ],
      "op": "DUP1",
      "path": "37"
    },
    "291": {
      "fn": "FindMe.funnyFunction",
      "offset": [
        821,
        925
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x53"
    },
    "293": {
      "fn": "FindMe.funnyFunction",
      "offset": [
        821,
        925
      ],
      "op": "DUP2",
      "path": "37"
    },
    "294": {
      "fn": "FindMe.funnyFunction",
      "offset": [
        821,
        925
      ],
      "op": "MSTORE",
      "path": "37"
    },
    "295": {
      "fn": "FindMe.funnyFunction",
      "offset": [
        821,
        925
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x20"
    },
    "297": {
      "fn": "FindMe.funnyFunction",
      "offset": [
        821,
        925
      ],
      "op": "ADD",
      "path": "37"
    },
    "298": {
      "fn": "FindMe.funnyFunction",
      "offset": [
        821,
        925
      ],
      "op": "PUSH2",
      "path": "37",
      "value": "0x465"
    },
    "301": {
      "fn": "FindMe.funnyFunction",
      "offset": [
        821,
        925
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x53"
    },
    "303": {
      "fn": "FindMe.funnyFunction",
      "offset": [
        821,
        925
      ],
      "op": "SWAP2",
      "path": "37"
    },
    "304": {
      "fn": "FindMe.funnyFunction",
      "offset": [
        821,
        925
      ],
      "op": "CODECOPY",
      "path": "37"
    },
    "305": {
      "fn": "FindMe.funnyFunction",
      "offset": [
        821,
        925
      ],
      "op": "SWAP1",
      "path": "37"
    },
    "306": {
      "fn": "FindMe.funnyFunction",
      "offset": [
        821,
        925
      ],
      "op": "POP",
      "path": "37"
    },
    "307": {
      "fn": "FindMe.funnyFunction",
      "offset": [
        750,
        932
      ],
      "op": "SWAP1",
      "path": "37"
    },
    "308": {
      "fn": "FindMe.funnyFunction",
      "jump": "o",
      "offset": [
        750,
        932
      ],
      "op": "JUMP",
      "path": "37"
    },
    "309": {
      "fn": "FindMe.claim",
      "offset": [
        389,
        744
      ],
      "op": "JUMPDEST",
      "path": "37"
    },
    "310": {
      "fn": "FindMe.claim",
      "offset": [
        501,
        509
      ],
      "op": "DUP1",
      "path": "37",
      "statement": 5
    },
    "311": {
      "fn": "FindMe.claim",
      "offset": [
        484,
        510
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x40"
    },
    "313": {
      "fn": "FindMe.claim",
      "offset": [
        484,
        510
      ],
      "op": "MLOAD",
      "path": "37"
    },
    "314": {
      "fn": "FindMe.claim",
      "offset": [
        484,
        510
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x20"
    },
    "316": {
      "fn": "FindMe.claim",
      "offset": [
        484,
        510
      ],
      "op": "ADD",
      "path": "37"
    },
    "317": {
      "fn": "FindMe.claim",
      "offset": [
        484,
        510
      ],
      "op": "PUSH2",
      "path": "37",
      "value": "0x146"
    },
    "320": {
      "fn": "FindMe.claim",
      "offset": [
        484,
        510
      ],
      "op": "SWAP2",
      "path": "37"
    },
    "321": {
      "fn": "FindMe.claim",
      "offset": [
        484,
        510
      ],
      "op": "SWAP1",
      "path": "37"
    },
    "322": {
      "fn": "FindMe.claim",
      "offset": [
        484,
        510
      ],
      "op": "PUSH2",
      "path": "37",
      "value": "0x3F2"
    },
    "325": {
      "fn": "FindMe.claim",
      "jump": "i",
      "offset": [
        484,
        510
      ],
      "op": "JUMP",
      "path": "37"
    },
    "326": {
      "fn": "FindMe.claim",
      "offset": [
        484,
        510
      ],
      "op": "JUMPDEST",
      "path": "37"
    },
    "327": {
      "fn": "FindMe.claim",
      "offset": [
        484,
        510
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x40"
    },
    "329": {
      "fn": "FindMe.claim",
      "offset": [
        484,
        510
      ],
      "op": "MLOAD",
      "path": "37"
    },
    "330": {
      "fn": "FindMe.claim",
      "offset": [
        484,
        510
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x20"
    },
    "332": {
      "fn": "FindMe.claim",
      "offset": [
        484,
        510
      ],
      "op": "DUP2",
      "path": "37"
    },
    "333": {
      "fn": "FindMe.claim",
      "offset": [
        484,
        510
      ],
      "op": "DUP4",
      "path": "37"
    },
    "334": {
      "fn": "FindMe.claim",
      "offset": [
        484,
        510
      ],
      "op": "SUB",
      "path": "37"
    },
    "335": {
      "fn": "FindMe.claim",
      "offset": [
        484,
        510
      ],
      "op": "SUB",
      "path": "37"
    },
    "336": {
      "fn": "FindMe.claim",
      "offset": [
        484,
        510
      ],
      "op": "DUP2",
      "path": "37"
    },
    "337": {
      "fn": "FindMe.claim",
      "offset": [
        484,
        510
      ],
      "op": "MSTORE",
      "path": "37"
    },
    "338": {
      "fn": "FindMe.claim",
      "offset": [
        484,
        510
      ],
      "op": "SWAP1",
      "path": "37"
    },
    "339": {
      "fn": "FindMe.claim",
      "offset": [
        484,
        510
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x40"
    },
    "341": {
      "fn": "FindMe.claim",
      "offset": [
        484,
        510
      ],
      "op": "MSTORE",
      "path": "37"
    },
    "342": {
      "fn": "FindMe.claim",
      "offset": [
        474,
        511
      ],
      "op": "DUP1",
      "path": "37"
    },
    "343": {
      "fn": "FindMe.claim",
      "offset": [
        474,
        511
      ],
      "op": "MLOAD",
      "path": "37"
    },
    "344": {
      "fn": "FindMe.claim",
      "offset": [
        474,
        511
      ],
      "op": "SWAP1",
      "path": "37"
    },
    "345": {
      "fn": "FindMe.claim",
      "offset": [
        474,
        511
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x20"
    },
    "347": {
      "fn": "FindMe.claim",
      "offset": [
        474,
        511
      ],
      "op": "ADD",
      "path": "37"
    },
    "348": {
      "fn": "FindMe.claim",
      "offset": [
        474,
        511
      ],
      "op": "KECCAK256",
      "path": "37"
    },
    "349": {
      "offset": [
        286,
        352
      ],
      "op": "PUSH32",
      "path": "37",
      "value": "0x564CCAF7594D66B1EAAEA24FE01F0585BF52EE70852AF4EAC0CC4B04711CD0E2"
    },
    "382": {
      "fn": "FindMe.claim",
      "offset": [
        466,
        470
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x0"
    },
    "384": {
      "fn": "FindMe.claim",
      "offset": [
        466,
        470
      ],
      "op": "SHL",
      "path": "37"
    },
    "385": {
      "branch": 8,
      "fn": "FindMe.claim",
      "offset": [
        466,
        511
      ],
      "op": "EQ",
      "path": "37"
    },
    "386": {
      "fn": "FindMe.claim",
      "offset": [
        445,
        555
      ],
      "op": "PUSH2",
      "path": "37",
      "value": "0x1C7"
    },
    "389": {
      "branch": 8,
      "fn": "FindMe.claim",
      "offset": [
        445,
        555
      ],
      "op": "JUMPI",
      "path": "37"
    },
    "390": {
      "fn": "FindMe.claim",
      "offset": [
        445,
        555
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x40"
    },
    "392": {
      "fn": "FindMe.claim",
      "offset": [
        445,
        555
      ],
      "op": "MLOAD",
      "path": "37"
    },
    "393": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "397": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "399": {
      "op": "SHL"
    },
    "400": {
      "fn": "FindMe.claim",
      "offset": [
        445,
        555
      ],
      "op": "DUP2",
      "path": "37"
    },
    "401": {
      "fn": "FindMe.claim",
      "offset": [
        445,
        555
      ],
      "op": "MSTORE",
      "path": "37"
    },
    "402": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "404": {
      "fn": "FindMe.claim",
      "offset": [
        445,
        555
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x4"
    },
    "406": {
      "fn": "FindMe.claim",
      "offset": [
        445,
        555
      ],
      "op": "DUP3",
      "path": "37"
    },
    "407": {
      "fn": "FindMe.claim",
      "offset": [
        445,
        555
      ],
      "op": "ADD",
      "path": "37"
    },
    "408": {
      "op": "MSTORE"
    },
    "409": {
      "op": "PUSH1",
      "value": "0x12"
    },
    "411": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "413": {
      "op": "DUP3"
    },
    "414": {
      "op": "ADD"
    },
    "415": {
      "op": "MSTORE"
    },
    "416": {
      "op": "PUSH18",
      "value": "0x496E636F727265637420726573706F6E7365"
    },
    "435": {
      "op": "PUSH1",
      "value": "0x70"
    },
    "437": {
      "op": "SHL"
    },
    "438": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "440": {
      "op": "DUP3"
    },
    "441": {
      "op": "ADD"
    },
    "442": {
      "op": "MSTORE"
    },
    "443": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "445": {
      "op": "ADD"
    },
    "446": {
      "fn": "FindMe.claim",
      "offset": [
        445,
        555
      ],
      "op": "JUMPDEST",
      "path": "37"
    },
    "447": {
      "fn": "FindMe.claim",
      "offset": [
        445,
        555
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x40"
    },
    "449": {
      "fn": "FindMe.claim",
      "offset": [
        445,
        555
      ],
      "op": "MLOAD",
      "path": "37"
    },
    "450": {
      "fn": "FindMe.claim",
      "offset": [
        445,
        555
      ],
      "op": "DUP1",
      "path": "37"
    },
    "451": {
      "fn": "FindMe.claim",
      "offset": [
        445,
        555
      ],
      "op": "SWAP2",
      "path": "37"
    },
    "452": {
      "fn": "FindMe.claim",
      "offset": [
        445,
        555
      ],
      "op": "SUB",
      "path": "37"
    },
    "453": {
      "fn": "FindMe.claim",
      "offset": [
        445,
        555
      ],
      "op": "SWAP1",
      "path": "37"
    },
    "454": {
      "fn": "FindMe.claim",
      "offset": [
        445,
        555
      ],
      "op": "REVERT",
      "optimizer_revert": true,
      "path": "37"
    },
    "455": {
      "fn": "FindMe.claim",
      "offset": [
        445,
        555
      ],
      "op": "JUMPDEST",
      "path": "37"
    },
    "456": {
      "fn": "FindMe.claim",
      "offset": [
        598,
        606
      ],
      "op": "PUSH8",
      "path": "37",
      "statement": 6,
      "value": "0x8AC7230489E80000"
    },
    "465": {
      "fn": "FindMe.claim",
      "offset": [
        573,
        594
      ],
      "op": "SELFBALANCE",
      "path": "37"
    },
    "466": {
      "fn": "FindMe.claim",
      "offset": [
        573,
        606
      ],
      "op": "LT",
      "path": "37"
    },
    "467": {
      "branch": 9,
      "fn": "FindMe.claim",
      "offset": [
        573,
        606
      ],
      "op": "ISZERO",
      "path": "37"
    },
    "468": {
      "fn": "FindMe.claim",
      "offset": [
        565,
        627
      ],
      "op": "PUSH2",
      "path": "37",
      "value": "0x212"
    },
    "471": {
      "branch": 9,
      "fn": "FindMe.claim",
      "offset": [
        565,
        627
      ],
      "op": "JUMPI",
      "path": "37"
    },
    "472": {
      "fn": "FindMe.claim",
      "offset": [
        565,
        627
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x40"
    },
    "474": {
      "fn": "FindMe.claim",
      "offset": [
        565,
        627
      ],
      "op": "MLOAD",
      "path": "37"
    },
    "475": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "479": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "481": {
      "op": "SHL"
    },
    "482": {
      "fn": "FindMe.claim",
      "offset": [
        565,
        627
      ],
      "op": "DUP2",
      "path": "37"
    },
    "483": {
      "fn": "FindMe.claim",
      "offset": [
        565,
        627
      ],
      "op": "MSTORE",
      "path": "37"
    },
    "484": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "486": {
      "fn": "FindMe.claim",
      "offset": [
        565,
        627
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x4"
    },
    "488": {
      "fn": "FindMe.claim",
      "offset": [
        565,
        627
      ],
      "op": "DUP3",
      "path": "37"
    },
    "489": {
      "fn": "FindMe.claim",
      "offset": [
        565,
        627
      ],
      "op": "ADD",
      "path": "37"
    },
    "490": {
      "op": "MSTORE"
    },
    "491": {
      "op": "PUSH1",
      "value": "0x10"
    },
    "493": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "495": {
      "op": "DUP3"
    },
    "496": {
      "op": "ADD"
    },
    "497": {
      "op": "MSTORE"
    },
    "498": {
      "op": "PUSH16",
      "value": "0x2737BA1032B737BAB3B41032BA3432B9"
    },
    "515": {
      "op": "PUSH1",
      "value": "0x81"
    },
    "517": {
      "op": "SHL"
    },
    "518": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "520": {
      "op": "DUP3"
    },
    "521": {
      "op": "ADD"
    },
    "522": {
      "op": "MSTORE"
    },
    "523": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "525": {
      "op": "ADD"
    },
    "526": {
      "fn": "FindMe.claim",
      "offset": [
        565,
        627
      ],
      "op": "PUSH2",
      "path": "37",
      "value": "0x1BE"
    },
    "529": {
      "op": "JUMP"
    },
    "530": {
      "fn": "FindMe.claim",
      "offset": [
        565,
        627
      ],
      "op": "JUMPDEST",
      "path": "37"
    },
    "531": {
      "fn": "FindMe.claim",
      "offset": [
        653,
        689
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x40"
    },
    "533": {
      "fn": "FindMe.claim",
      "offset": [
        653,
        689
      ],
      "op": "MLOAD",
      "path": "37"
    },
    "534": {
      "fn": "FindMe.claim",
      "offset": [
        638,
        647
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x0"
    },
    "536": {
      "fn": "FindMe.claim",
      "offset": [
        638,
        647
      ],
      "op": "SWAP1",
      "path": "37"
    },
    "537": {
      "fn": "FindMe.claim",
      "offset": [
        653,
        663
      ],
      "op": "CALLER",
      "path": "37"
    },
    "538": {
      "fn": "FindMe.claim",
      "offset": [
        653,
        663
      ],
      "op": "SWAP1",
      "path": "37"
    },
    "539": {
      "fn": "FindMe.claim",
      "offset": [
        676,
        684
      ],
      "op": "PUSH8",
      "path": "37",
      "value": "0x8AC7230489E80000"
    },
    "548": {
      "fn": "FindMe.claim",
      "offset": [
        676,
        684
      ],
      "op": "SWAP1",
      "path": "37"
    },
    "549": {
      "fn": "FindMe.claim",
      "offset": [
        638,
        647
      ],
      "op": "DUP4",
      "path": "37"
    },
    "550": {
      "fn": "FindMe.claim",
      "offset": [
        653,
        689
      ],
      "op": "DUP2",
      "path": "37"
    },
    "551": {
      "fn": "FindMe.claim",
      "offset": [
        638,
        647
      ],
      "op": "DUP2",
      "path": "37"
    },
    "552": {
      "fn": "FindMe.claim",
      "offset": [
        653,
        689
      ],
      "op": "DUP2",
      "path": "37"
    },
    "553": {
      "fn": "FindMe.claim",
      "offset": [
        676,
        684
      ],
      "op": "DUP6",
      "path": "37"
    },
    "554": {
      "fn": "FindMe.claim",
      "offset": [
        653,
        663
      ],
      "op": "DUP8",
      "path": "37"
    },
    "555": {
      "fn": "FindMe.claim",
      "offset": [
        653,
        689
      ],
      "op": "GAS",
      "path": "37"
    },
    "556": {
      "fn": "FindMe.claim",
      "offset": [
        653,
        689
      ],
      "op": "CALL",
      "path": "37"
    },
    "557": {
      "fn": "FindMe.claim",
      "offset": [
        653,
        689
      ],
      "op": "SWAP3",
      "path": "37"
    },
    "558": {
      "fn": "FindMe.claim",
      "offset": [
        653,
        689
      ],
      "op": "POP",
      "path": "37"
    },
    "559": {
      "fn": "FindMe.claim",
      "offset": [
        653,
        689
      ],
      "op": "POP",
      "path": "37"
    },
    "560": {
      "fn": "FindMe.claim",
      "offset": [
        653,
        689
      ],
      "op": "POP",
      "path": "37"
    },
    "561": {
      "fn": "FindMe.claim",
      "offset": [
        653,
        689
      ],
      "op": "RETURNDATASIZE",
      "path": "37"
    },
    "562": {
      "fn": "FindMe.claim",
      "offset": [
        653,
        689
      ],
      "op": "DUP1",
      "path": "37"
    },
    "563": {
      "fn": "FindMe.claim",
      "offset": [
        653,
        689
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x0"
    },
    "565": {
      "fn": "FindMe.claim",
      "offset": [
        653,
        689
      ],
      "op": "DUP2",
      "path": "37"
    },
    "566": {
      "fn": "FindMe.claim",
      "offset": [
        653,
        689
      ],
      "op": "EQ",
      "path": "37"
    },
    "567": {
      "fn": "FindMe.claim",
      "offset": [
        653,
        689
      ],
      "op": "PUSH2",
      "path": "37",
      "value": "0x25C"
    },
    "570": {
      "fn": "FindMe.claim",
      "offset": [
        653,
        689
      ],
      "op": "JUMPI",
      "path": "37"
    },
    "571": {
      "fn": "FindMe.claim",
      "offset": [
        653,
        689
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x40"
    },
    "573": {
      "fn": "FindMe.claim",
      "offset": [
        653,
        689
      ],
      "op": "MLOAD",
      "path": "37"
    },
    "574": {
      "fn": "FindMe.claim",
      "offset": [
        653,
        689
      ],
      "op": "SWAP2",
      "path": "37"
    },
    "575": {
      "fn": "FindMe.claim",
      "offset": [
        653,
        689
      ],
      "op": "POP",
      "path": "37"
    },
    "576": {
      "fn": "FindMe.claim",
      "offset": [
        653,
        689
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x1F"
    },
    "578": {
      "fn": "FindMe.claim",
      "offset": [
        653,
        689
      ],
      "op": "NOT",
      "path": "37"
    },
    "579": {
      "fn": "FindMe.claim",
      "offset": [
        653,
        689
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x3F"
    },
    "581": {
      "fn": "FindMe.claim",
      "offset": [
        653,
        689
      ],
      "op": "RETURNDATASIZE",
      "path": "37"
    },
    "582": {
      "fn": "FindMe.claim",
      "offset": [
        653,
        689
      ],
      "op": "ADD",
      "path": "37"
    },
    "583": {
      "fn": "FindMe.claim",
      "offset": [
        653,
        689
      ],
      "op": "AND",
      "path": "37"
    },
    "584": {
      "fn": "FindMe.claim",
      "offset": [
        653,
        689
      ],
      "op": "DUP3",
      "path": "37"
    },
    "585": {
      "fn": "FindMe.claim",
      "offset": [
        653,
        689
      ],
      "op": "ADD",
      "path": "37"
    },
    "586": {
      "fn": "FindMe.claim",
      "offset": [
        653,
        689
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x40"
    },
    "588": {
      "fn": "FindMe.claim",
      "offset": [
        653,
        689
      ],
      "op": "MSTORE",
      "path": "37"
    },
    "589": {
      "fn": "FindMe.claim",
      "offset": [
        653,
        689
      ],
      "op": "RETURNDATASIZE",
      "path": "37"
    },
    "590": {
      "fn": "FindMe.claim",
      "offset": [
        653,
        689
      ],
      "op": "DUP3",
      "path": "37"
    },
    "591": {
      "fn": "FindMe.claim",
      "offset": [
        653,
        689
      ],
      "op": "MSTORE",
      "path": "37"
    },
    "592": {
      "fn": "FindMe.claim",
      "offset": [
        653,
        689
      ],
      "op": "RETURNDATASIZE",
      "path": "37"
    },
    "593": {
      "fn": "FindMe.claim",
      "offset": [
        653,
        689
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x0"
    },
    "595": {
      "fn": "FindMe.claim",
      "offset": [
        653,
        689
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x20"
    },
    "597": {
      "fn": "FindMe.claim",
      "offset": [
        653,
        689
      ],
      "op": "DUP5",
      "path": "37"
    },
    "598": {
      "fn": "FindMe.claim",
      "offset": [
        653,
        689
      ],
      "op": "ADD",
      "path": "37"
    },
    "599": {
      "fn": "FindMe.claim",
      "offset": [
        653,
        689
      ],
      "op": "RETURNDATACOPY",
      "path": "37"
    },
    "600": {
      "fn": "FindMe.claim",
      "offset": [
        653,
        689
      ],
      "op": "PUSH2",
      "path": "37",
      "value": "0x261"
    },
    "603": {
      "fn": "FindMe.claim",
      "offset": [
        653,
        689
      ],
      "op": "JUMP",
      "path": "37"
    },
    "604": {
      "fn": "FindMe.claim",
      "offset": [
        653,
        689
      ],
      "op": "JUMPDEST",
      "path": "37"
    },
    "605": {
      "fn": "FindMe.claim",
      "offset": [
        653,
        689
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x60"
    },
    "607": {
      "fn": "FindMe.claim",
      "offset": [
        653,
        689
      ],
      "op": "SWAP2",
      "path": "37"
    },
    "608": {
      "fn": "FindMe.claim",
      "offset": [
        653,
        689
      ],
      "op": "POP",
      "path": "37"
    },
    "609": {
      "fn": "FindMe.claim",
      "offset": [
        653,
        689
      ],
      "op": "JUMPDEST",
      "path": "37"
    },
    "610": {
      "fn": "FindMe.claim",
      "offset": [
        653,
        689
      ],
      "op": "POP",
      "path": "37"
    },
    "611": {
      "fn": "FindMe.claim",
      "offset": [
        637,
        689
      ],
      "op": "POP",
      "path": "37"
    },
    "612": {
      "fn": "FindMe.claim",
      "offset": [
        637,
        689
      ],
      "op": "SWAP1",
      "path": "37"
    },
    "613": {
      "fn": "FindMe.claim",
      "offset": [
        637,
        689
      ],
      "op": "POP",
      "path": "37"
    },
    "614": {
      "branch": 10,
      "fn": "FindMe.claim",
      "offset": [
        708,
        712
      ],
      "op": "DUP1",
      "path": "37",
      "statement": 7
    },
    "615": {
      "fn": "FindMe.claim",
      "offset": [
        700,
        737
      ],
      "op": "PUSH2",
      "path": "37",
      "value": "0x2A9"
    },
    "618": {
      "branch": 10,
      "fn": "FindMe.claim",
      "offset": [
        700,
        737
      ],
      "op": "JUMPI",
      "path": "37"
    },
    "619": {
      "fn": "FindMe.claim",
      "offset": [
        700,
        737
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x40"
    },
    "621": {
      "fn": "FindMe.claim",
      "offset": [
        700,
        737
      ],
      "op": "MLOAD",
      "path": "37"
    },
    "622": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "626": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "628": {
      "op": "SHL"
    },
    "629": {
      "fn": "FindMe.claim",
      "offset": [
        700,
        737
      ],
      "op": "DUP2",
      "path": "37"
    },
    "630": {
      "fn": "FindMe.claim",
      "offset": [
        700,
        737
      ],
      "op": "MSTORE",
      "path": "37"
    },
    "631": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "633": {
      "fn": "FindMe.claim",
      "offset": [
        700,
        737
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x4"
    },
    "635": {
      "fn": "FindMe.claim",
      "offset": [
        700,
        737
      ],
      "op": "DUP3",
      "path": "37"
    },
    "636": {
      "fn": "FindMe.claim",
      "offset": [
        700,
        737
      ],
      "op": "ADD",
      "path": "37"
    },
    "637": {
      "op": "MSTORE"
    },
    "638": {
      "op": "PUSH1",
      "value": "0x14"
    },
    "640": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "642": {
      "op": "DUP3"
    },
    "643": {
      "op": "ADD"
    },
    "644": {
      "op": "MSTORE"
    },
    "645": {
      "op": "PUSH20",
      "value": "0x2330B4B632B2103A379039B2B7321022BA3432B9"
    },
    "666": {
      "op": "PUSH1",
      "value": "0x61"
    },
    "668": {
      "op": "SHL"
    },
    "669": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "671": {
      "op": "DUP3"
    },
    "672": {
      "op": "ADD"
    },
    "673": {
      "op": "MSTORE"
    },
    "674": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "676": {
      "op": "ADD"
    },
    "677": {
      "fn": "FindMe.claim",
      "offset": [
        700,
        737
      ],
      "op": "PUSH2",
      "path": "37",
      "value": "0x1BE"
    },
    "680": {
      "op": "JUMP"
    },
    "681": {
      "fn": "FindMe.claim",
      "offset": [
        700,
        737
      ],
      "op": "JUMPDEST",
      "path": "37"
    },
    "682": {
      "fn": "FindMe.claim",
      "offset": [
        435,
        744
      ],
      "op": "POP",
      "path": "37"
    },
    "683": {
      "fn": "FindMe.claim",
      "offset": [
        389,
        744
      ],
      "op": "POP",
      "path": "37"
    },
    "684": {
      "fn": "FindMe.claim",
      "jump": "o",
      "offset": [
        389,
        744
      ],
      "op": "JUMP",
      "path": "37"
    },
    "685": {
      "op": "JUMPDEST"
    },
    "686": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "688": {
      "op": "JUMPDEST"
    },
    "689": {
      "op": "DUP4"
    },
    "690": {
      "op": "DUP2"
    },
    "691": {
      "op": "LT"
    },
    "692": {
      "op": "ISZERO"
    },
    "693": {
      "op": "PUSH2",
      "value": "0x2C8"
    },
    "696": {
      "op": "JUMPI"
    },
    "697": {
      "op": "DUP2"
    },
    "698": {
      "op": "DUP2"
    },
    "699": {
      "op": "ADD"
    },
    "700": {
      "op": "MLOAD"
    },
    "701": {
      "op": "DUP4"
    },
    "702": {
      "op": "DUP3"
    },
    "703": {
      "op": "ADD"
    },
    "704": {
      "op": "MSTORE"
    },
    "705": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "707": {
      "op": "ADD"
    },
    "708": {
      "op": "PUSH2",
      "value": "0x2B0"
    },
    "711": {
      "op": "JUMP"
    },
    "712": {
      "op": "JUMPDEST"
    },
    "713": {
      "op": "POP"
    },
    "714": {
      "op": "POP"
    },
    "715": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "717": {
      "op": "SWAP2"
    },
    "718": {
      "op": "ADD"
    },
    "719": {
      "op": "MSTORE"
    },
    "720": {
      "jump": "o",
      "op": "JUMP"
    },
    "721": {
      "op": "JUMPDEST"
    },
    "722": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "724": {
      "op": "DUP2"
    },
    "725": {
      "op": "MSTORE"
    },
    "726": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "728": {
      "op": "DUP3"
    },
    "729": {
      "op": "MLOAD"
    },
    "730": {
      "op": "DUP1"
    },
    "731": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "733": {
      "op": "DUP5"
    },
    "734": {
      "op": "ADD"
    },
    "735": {
      "op": "MSTORE"
    },
    "736": {
      "op": "PUSH2",
      "value": "0x2F0"
    },
    "739": {
      "op": "DUP2"
    },
    "740": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "742": {
      "op": "DUP6"
    },
    "743": {
      "op": "ADD"
    },
    "744": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "746": {
      "op": "DUP8"
    },
    "747": {
      "op": "ADD"
    },
    "748": {
      "op": "PUSH2",
      "value": "0x2AD"
    },
    "751": {
      "jump": "i",
      "op": "JUMP"
    },
    "752": {
      "op": "JUMPDEST"
    },
    "753": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "755": {
      "op": "ADD"
    },
    "756": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "758": {
      "op": "NOT"
    },
    "759": {
      "op": "AND"
    },
    "760": {
      "op": "SWAP2"
    },
    "761": {
      "op": "SWAP1"
    },
    "762": {
      "op": "SWAP2"
    },
    "763": {
      "op": "ADD"
    },
    "764": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "766": {
      "op": "ADD"
    },
    "767": {
      "op": "SWAP3"
    },
    "768": {
      "op": "SWAP2"
    },
    "769": {
      "op": "POP"
    },
    "770": {
      "op": "POP"
    },
    "771": {
      "jump": "o",
      "op": "JUMP"
    },
    "772": {
      "op": "JUMPDEST"
    },
    "773": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "778": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "780": {
      "op": "SHL"
    },
    "781": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "783": {
      "op": "MSTORE"
    },
    "784": {
      "op": "PUSH1",
      "value": "0x41"
    },
    "786": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "788": {
      "op": "MSTORE"
    },
    "789": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "791": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "793": {
      "op": "REVERT"
    },
    "794": {
      "op": "JUMPDEST"
    },
    "795": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "797": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "799": {
      "op": "DUP3"
    },
    "800": {
      "op": "DUP5"
    },
    "801": {
      "op": "SUB"
    },
    "802": {
      "op": "SLT"
    },
    "803": {
      "op": "ISZERO"
    },
    "804": {
      "op": "PUSH2",
      "value": "0x32C"
    },
    "807": {
      "op": "JUMPI"
    },
    "808": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "810": {
      "op": "DUP1"
    },
    "811": {
      "op": "REVERT"
    },
    "812": {
      "op": "JUMPDEST"
    },
    "813": {
      "op": "DUP2"
    },
    "814": {
      "op": "CALLDATALOAD"
    },
    "815": {
      "op": "PUSH8",
      "value": "0xFFFFFFFFFFFFFFFF"
    },
    "824": {
      "op": "DUP1"
    },
    "825": {
      "op": "DUP3"
    },
    "826": {
      "op": "GT"
    },
    "827": {
      "op": "ISZERO"
    },
    "828": {
      "op": "PUSH2",
      "value": "0x344"
    },
    "831": {
      "op": "JUMPI"
    },
    "832": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "834": {
      "op": "DUP1"
    },
    "835": {
      "op": "REVERT"
    },
    "836": {
      "op": "JUMPDEST"
    },
    "837": {
      "op": "DUP2"
    },
    "838": {
      "op": "DUP5"
    },
    "839": {
      "op": "ADD"
    },
    "840": {
      "op": "SWAP2"
    },
    "841": {
      "op": "POP"
    },
    "842": {
      "op": "DUP5"
    },
    "843": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "845": {
      "op": "DUP4"
    },
    "846": {
      "op": "ADD"
    },
    "847": {
      "op": "SLT"
    },
    "848": {
      "op": "PUSH2",
      "value": "0x358"
    },
    "851": {
      "op": "JUMPI"
    },
    "852": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "854": {
      "op": "DUP1"
    },
    "855": {
      "op": "REVERT"
    },
    "856": {
      "op": "JUMPDEST"
    },
    "857": {
      "op": "DUP2"
    },
    "858": {
      "op": "CALLDATALOAD"
    },
    "859": {
      "op": "DUP2"
    },
    "860": {
      "op": "DUP2"
    },
    "861": {
      "op": "GT"
    },
    "862": {
      "op": "ISZERO"
    },
    "863": {
      "op": "PUSH2",
      "value": "0x36A"
    },
    "866": {
      "op": "JUMPI"
    },
    "867": {
      "op": "PUSH2",
      "value": "0x36A"
    },
    "870": {
      "op": "PUSH2",
      "value": "0x304"
    },
    "873": {
      "jump": "i",
      "op": "JUMP"
    },
    "874": {
      "op": "JUMPDEST"
    },
    "875": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "877": {
      "op": "MLOAD"
    },
    "878": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "880": {
      "op": "DUP3"
    },
    "881": {
      "op": "ADD"
    },
    "882": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "884": {
      "op": "NOT"
    },
    "885": {
      "op": "SWAP1"
    },
    "886": {
      "op": "DUP2"
    },
    "887": {
      "op": "AND"
    },
    "888": {
      "op": "PUSH1",
      "value": "0x3F"
    },
    "890": {
      "op": "ADD"
    },
    "891": {
      "op": "AND"
    },
    "892": {
      "op": "DUP2"
    },
    "893": {
      "op": "ADD"
    },
    "894": {
      "op": "SWAP1"
    },
    "895": {
      "op": "DUP4"
    },
    "896": {
      "op": "DUP3"
    },
    "897": {
      "op": "GT"
    },
    "898": {
      "op": "DUP2"
    },
    "899": {
      "op": "DUP4"
    },
    "900": {
      "op": "LT"
    },
    "901": {
      "op": "OR"
    },
    "902": {
      "op": "ISZERO"
    },
    "903": {
      "op": "PUSH2",
      "value": "0x392"
    },
    "906": {
      "op": "JUMPI"
    },
    "907": {
      "op": "PUSH2",
      "value": "0x392"
    },
    "910": {
      "op": "PUSH2",
      "value": "0x304"
    },
    "913": {
      "jump": "i",
      "op": "JUMP"
    },
    "914": {
      "op": "JUMPDEST"
    },
    "915": {
      "op": "DUP2"
    },
    "916": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "918": {
      "op": "MSTORE"
    },
    "919": {
      "op": "DUP3"
    },
    "920": {
      "op": "DUP2"
    },
    "921": {
      "op": "MSTORE"
    },
    "922": {
      "op": "DUP8"
    },
    "923": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "925": {
      "op": "DUP5"
    },
    "926": {
      "op": "DUP8"
    },
    "927": {
      "op": "ADD"
    },
    "928": {
      "op": "ADD"
    },
    "929": {
      "op": "GT"
    },
    "930": {
      "op": "ISZERO"
    },
    "931": {
      "op": "PUSH2",
      "value": "0x3AB"
    },
    "934": {
      "op": "JUMPI"
    },
    "935": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "937": {
      "op": "DUP1"
    },
    "938": {
      "op": "REVERT"
    },
    "939": {
      "op": "JUMPDEST"
    },
    "940": {
      "op": "DUP3"
    },
    "941": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "943": {
      "op": "DUP7"
    },
    "944": {
      "op": "ADD"
    },
    "945": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "947": {
      "op": "DUP4"
    },
    "948": {
      "op": "ADD"
    },
    "949": {
      "op": "CALLDATACOPY"
    },
    "950": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "952": {
      "op": "SWAP3"
    },
    "953": {
      "op": "DUP2"
    },
    "954": {
      "op": "ADD"
    },
    "955": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "957": {
      "op": "ADD"
    },
    "958": {
      "op": "SWAP3"
    },
    "959": {
      "op": "SWAP1"
    },
    "960": {
      "op": "SWAP3"
    },
    "961": {
      "op": "MSTORE"
    },
    "962": {
      "op": "POP"
    },
    "963": {
      "op": "SWAP6"
    },
    "964": {
      "op": "SWAP5"
    },
    "965": {
      "op": "POP"
    },
    "966": {
      "op": "POP"
    },
    "967": {
      "op": "POP"
    },
    "968": {
      "op": "POP"
    },
    "969": {
      "op": "POP"
    },
    "970": {
      "jump": "o",
      "op": "JUMP"
    },
    "971": {
      "op": "JUMPDEST"
    },
    "972": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "974": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "976": {
      "op": "DUP3"
    },
    "977": {
      "op": "ADD"
    },
    "978": {
      "op": "PUSH2",
      "value": "0x3EB"
    },
    "981": {
      "op": "JUMPI"
    },
    "982": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "987": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "989": {
      "op": "SHL"
    },
    "990": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "992": {
      "op": "MSTORE"
    },
    "993": {
      "op": "PUSH1",
      "value": "0x11"
    },
    "995": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "997": {
      "op": "MSTORE"
    },
    "998": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "1000": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1002": {
      "op": "REVERT"
    },
    "1003": {
      "op": "JUMPDEST"
    },
    "1004": {
      "op": "POP"
    },
    "1005": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1007": {
      "op": "ADD"
    },
    "1008": {
      "op": "SWAP1"
    },
    "1009": {
      "jump": "o",
      "op": "JUMP"
    },
    "1010": {
      "op": "JUMPDEST"
    },
    "1011": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1013": {
      "op": "DUP3"
    },
    "1014": {
      "op": "MLOAD"
    },
    "1015": {
      "op": "PUSH2",
      "value": "0x404"
    },
    "1018": {
      "op": "DUP2"
    },
    "1019": {
      "op": "DUP5"
    },
    "1020": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1022": {
      "op": "DUP8"
    },
    "1023": {
      "op": "ADD"
    },
    "1024": {
      "op": "PUSH2",
      "value": "0x2AD"
    },
    "1027": {
      "jump": "i",
      "op": "JUMP"
    },
    "1028": {
      "op": "JUMPDEST"
    },
    "1029": {
      "op": "SWAP2"
    },
    "1030": {
      "op": "SWAP1"
    },
    "1031": {
      "op": "SWAP2"
    },
    "1032": {
      "op": "ADD"
    },
    "1033": {
      "op": "SWAP3"
    },
    "1034": {
      "op": "SWAP2"
    },
    "1035": {
      "op": "POP"
    },
    "1036": {
      "op": "POP"
    },
    "1037": {
      "jump": "o",
      "op": "JUMP"
    }
  },
  "sha1": "d299d29c8dac9cf72f93c330628419081a866109",
  "source": "// SCH Course Copyright Policy (C): DO-NOT-SHARE-WITH-ANYONE\n// https://smartcontractshacking.com/#copyright-policy\npragma solidity ^0.8.13;\n\n/**\n * @title FindMe\n * @author JohnnyTime (https://smartcontractshacking.com)\n */\ncontract FindMe {\n    bytes32 public constant hash =\n        0x564ccaf7594d66b1eaaea24fe01f0585bf52ee70852af4eac0cc4b04711cd0e2;\n\n    constructor() payable {}\n\n    function claim(string memory solution) public {\n        require(\n            hash == keccak256(abi.encodePacked(solution)),\n            \"Incorrect response\"\n        );\n        require(address(this).balance >= 10 ether, \"Not enough ether\");\n        (bool sent, ) = msg.sender.call{value: 10 ether}(\"\");\n\n        require(sent, \"Failed to send Ether\");\n    }\n\n    function funnyFunction() public pure returns (string memory) {\n        return\n            \"I am a funny function, I am not used for anything, I am just here to make you laugh\";\n    }\n\n    function complicateFunction() public pure returns (string memory) {\n        for (uint256 i = 0; i < 100; i++) {\n            if (i == 50) {\n                break;\n            }\n        }\n\n        return\n            \"I am a complicate function, I am not used for anything, I am just here to make you cry\";\n    }\n\n    function getBalance() public view returns (uint256) {\n        return address(this).balance;\n    }\n}\n",
  "sourceMap": "225:1127:37:-:0;;;;;;;;;",
  "sourcePath": "contracts/frontrunning-1/FindMe.sol",
  "type": "contract"
}